
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003660  08003660  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003660  08003660  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003660  08003660  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080036d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080036d8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074e3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001777  00000000  00000000  0002757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00028cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  000293c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017430  00000000  00000000  00029a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073ac  00000000  00000000  00040e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008111d  00000000  00000000  000481ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a8  00000000  00000000  000c935c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035e4 	.word	0x080035e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035e4 	.word	0x080035e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_frsub>:
 8000998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800099c:	e002      	b.n	80009a4 <__addsf3>
 800099e:	bf00      	nop

080009a0 <__aeabi_fsub>:
 80009a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a4 <__addsf3>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	bf1f      	itttt	ne
 80009a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ac:	ea92 0f03 	teqne	r2, r3
 80009b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b8:	d06a      	beq.n	8000a90 <__addsf3+0xec>
 80009ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c2:	bfc1      	itttt	gt
 80009c4:	18d2      	addgt	r2, r2, r3
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	4048      	eorgt	r0, r1
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	bf88      	it	hi
 80009d4:	4770      	bxhi	lr
 80009d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4249      	negne	r1, r1
 80009f6:	ea92 0f03 	teq	r2, r3
 80009fa:	d03f      	beq.n	8000a7c <__addsf3+0xd8>
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	fa41 fc03 	asr.w	ip, r1, r3
 8000a04:	eb10 000c 	adds.w	r0, r0, ip
 8000a08:	f1c3 0320 	rsb	r3, r3, #32
 8000a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a14:	d502      	bpl.n	8000a1c <__addsf3+0x78>
 8000a16:	4249      	negs	r1, r1
 8000a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a20:	d313      	bcc.n	8000a4a <__addsf3+0xa6>
 8000a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a26:	d306      	bcc.n	8000a36 <__addsf3+0x92>
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	d251      	bcs.n	8000ada <__addsf3+0x136>
 8000a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3e:	bf08      	it	eq
 8000a40:	f020 0001 	biceq.w	r0, r0, #1
 8000a44:	ea40 0003 	orr.w	r0, r0, r3
 8000a48:	4770      	bx	lr
 8000a4a:	0049      	lsls	r1, r1, #1
 8000a4c:	eb40 0000 	adc.w	r0, r0, r0
 8000a50:	3a01      	subs	r2, #1
 8000a52:	bf28      	it	cs
 8000a54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a58:	d2ed      	bcs.n	8000a36 <__addsf3+0x92>
 8000a5a:	fab0 fc80 	clz	ip, r0
 8000a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a62:	ebb2 020c 	subs.w	r2, r2, ip
 8000a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6a:	bfaa      	itet	ge
 8000a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a70:	4252      	neglt	r2, r2
 8000a72:	4318      	orrge	r0, r3
 8000a74:	bfbc      	itt	lt
 8000a76:	40d0      	lsrlt	r0, r2
 8000a78:	4318      	orrlt	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	f092 0f00 	teq	r2, #0
 8000a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a84:	bf06      	itte	eq
 8000a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8a:	3201      	addeq	r2, #1
 8000a8c:	3b01      	subne	r3, #1
 8000a8e:	e7b5      	b.n	80009fc <__addsf3+0x58>
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d021      	beq.n	8000ae4 <__addsf3+0x140>
 8000aa0:	ea92 0f03 	teq	r2, r3
 8000aa4:	d004      	beq.n	8000ab0 <__addsf3+0x10c>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	bf08      	it	eq
 8000aac:	4608      	moveq	r0, r1
 8000aae:	4770      	bx	lr
 8000ab0:	ea90 0f01 	teq	r0, r1
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2000      	movne	r0, #0
 8000ab8:	4770      	bxne	lr
 8000aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000abe:	d104      	bne.n	8000aca <__addsf3+0x126>
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ace:	bf3c      	itt	cc
 8000ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bxcc	lr
 8000ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae8:	bf16      	itet	ne
 8000aea:	4608      	movne	r0, r1
 8000aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af0:	4601      	movne	r1, r0
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	bf06      	itte	eq
 8000af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afa:	ea90 0f01 	teqeq	r0, r1
 8000afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_ui2f>:
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e004      	b.n	8000b14 <__aeabi_i2f+0x8>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_i2f>:
 8000b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	bf48      	it	mi
 8000b12:	4240      	negmi	r0, r0
 8000b14:	ea5f 0c00 	movs.w	ip, r0
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b20:	4601      	mov	r1, r0
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	e01c      	b.n	8000b62 <__aeabi_l2f+0x2a>

08000b28 <__aeabi_ul2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e00a      	b.n	8000b4c <__aeabi_l2f+0x14>
 8000b36:	bf00      	nop

08000b38 <__aeabi_l2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_l2f+0x14>
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	ea5f 0c01 	movs.w	ip, r1
 8000b50:	bf02      	ittt	eq
 8000b52:	4684      	moveq	ip, r0
 8000b54:	4601      	moveq	r1, r0
 8000b56:	2000      	moveq	r0, #0
 8000b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b66:	fabc f28c 	clz	r2, ip
 8000b6a:	3a08      	subs	r2, #8
 8000b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b70:	db10      	blt.n	8000b94 <__aeabi_l2f+0x5c>
 8000b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7c:	f1c2 0220 	rsb	r2, r2, #32
 8000b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b84:	fa20 f202 	lsr.w	r2, r0, r2
 8000b88:	eb43 0002 	adc.w	r0, r3, r2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f102 0220 	add.w	r2, r2, #32
 8000b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_fmul>:
 8000bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc2:	ea92 0f0c 	teqne	r2, ip
 8000bc6:	ea93 0f0c 	teqne	r3, ip
 8000bca:	d06f      	beq.n	8000cac <__aeabi_fmul+0xf8>
 8000bcc:	441a      	add	r2, r3
 8000bce:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd2:	0240      	lsls	r0, r0, #9
 8000bd4:	bf18      	it	ne
 8000bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bda:	d01e      	beq.n	8000c1a <__aeabi_fmul+0x66>
 8000bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf4:	bf3e      	ittt	cc
 8000bf6:	0049      	lslcc	r1, r1, #1
 8000bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	ea40 0001 	orr.w	r0, r0, r1
 8000c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c06:	2afd      	cmp	r2, #253	; 0xfd
 8000c08:	d81d      	bhi.n	8000c46 <__aeabi_fmul+0x92>
 8000c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	0249      	lsleq	r1, r1, #9
 8000c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2e:	3a7f      	subs	r2, #127	; 0x7f
 8000c30:	bfc2      	ittt	gt
 8000c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3a:	4770      	bxgt	lr
 8000c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	3a01      	subs	r2, #1
 8000c46:	dc5d      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000c48:	f112 0f19 	cmn.w	r2, #25
 8000c4c:	bfdc      	itt	le
 8000c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	4770      	bxle	lr
 8000c54:	f1c2 0200 	rsb	r2, r2, #0
 8000c58:	0041      	lsls	r1, r0, #1
 8000c5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5e:	f1c2 0220 	rsb	r2, r2, #32
 8000c62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6a:	f140 0000 	adc.w	r0, r0, #0
 8000c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c72:	bf08      	it	eq
 8000c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c78:	4770      	bx	lr
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xce>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e78f      	b.n	8000bcc <__aeabi_fmul+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	bf18      	it	ne
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d00a      	beq.n	8000cd2 <__aeabi_fmul+0x11e>
 8000cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc0:	bf18      	it	ne
 8000cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	d1d8      	bne.n	8000c7a <__aeabi_fmul+0xc6>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f090 0f00 	teq	r0, #0
 8000cd6:	bf17      	itett	ne
 8000cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	f091 0f00 	teqne	r1, #0
 8000ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce6:	d014      	beq.n	8000d12 <__aeabi_fmul+0x15e>
 8000ce8:	ea92 0f0c 	teq	r2, ip
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fmul+0x13e>
 8000cee:	0242      	lsls	r2, r0, #9
 8000cf0:	d10f      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000cf2:	ea93 0f0c 	teq	r3, ip
 8000cf6:	d103      	bne.n	8000d00 <__aeabi_fmul+0x14c>
 8000cf8:	024b      	lsls	r3, r1, #9
 8000cfa:	bf18      	it	ne
 8000cfc:	4608      	movne	r0, r1
 8000cfe:	d108      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000d00:	ea80 0001 	eor.w	r0, r0, r1
 8000d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	4770      	bx	lr
 8000d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fdiv>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d069      	beq.n	8000e08 <__aeabi_fdiv+0xec>
 8000d34:	eba2 0203 	sub.w	r2, r2, r3
 8000d38:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3c:	0249      	lsls	r1, r1, #9
 8000d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d42:	d037      	beq.n	8000db4 <__aeabi_fdiv+0x98>
 8000d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf38      	it	cc
 8000d58:	005b      	lslcc	r3, r3, #1
 8000d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d62:	428b      	cmp	r3, r1
 8000d64:	bf24      	itt	cs
 8000d66:	1a5b      	subcs	r3, r3, r1
 8000d68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7e:	bf24      	itt	cs
 8000d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	bf18      	it	ne
 8000d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9e:	d1e0      	bne.n	8000d62 <__aeabi_fdiv+0x46>
 8000da0:	2afd      	cmp	r2, #253	; 0xfd
 8000da2:	f63f af50 	bhi.w	8000c46 <__aeabi_fmul+0x92>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbc:	327f      	adds	r2, #127	; 0x7f
 8000dbe:	bfc2      	ittt	gt
 8000dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc8:	4770      	bxgt	lr
 8000dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	e737      	b.n	8000c46 <__aeabi_fmul+0x92>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0040      	lsleq	r0, r0, #1
 8000de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de6:	3a01      	subeq	r2, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xc2>
 8000dea:	ea40 000c 	orr.w	r0, r0, ip
 8000dee:	f093 0f00 	teq	r3, #0
 8000df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0049      	lsleq	r1, r1, #1
 8000dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfe:	3b01      	subeq	r3, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xda>
 8000e02:	ea41 010c 	orr.w	r1, r1, ip
 8000e06:	e795      	b.n	8000d34 <__aeabi_fdiv+0x18>
 8000e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d108      	bne.n	8000e24 <__aeabi_fdiv+0x108>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	f47f af7d 	bne.w	8000d12 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	f47f af70 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e776      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	d104      	bne.n	8000e34 <__aeabi_fdiv+0x118>
 8000e2a:	024b      	lsls	r3, r1, #9
 8000e2c:	f43f af4c 	beq.w	8000cc8 <__aeabi_fmul+0x114>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e76e      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1ca      	bne.n	8000dd6 <__aeabi_fdiv+0xba>
 8000e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e44:	f47f af5c 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	f47f af3c 	bne.w	8000cc8 <__aeabi_fmul+0x114>
 8000e50:	e75f      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e52:	bf00      	nop

08000e54 <__gesf2>:
 8000e54:	f04f 3cff 	mov.w	ip, #4294967295
 8000e58:	e006      	b.n	8000e68 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__lesf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	e002      	b.n	8000e68 <__cmpsf2+0x4>
 8000e62:	bf00      	nop

08000e64 <__cmpsf2>:
 8000e64:	f04f 0c01 	mov.w	ip, #1
 8000e68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e78:	bf18      	it	ne
 8000e7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e7e:	d011      	beq.n	8000ea4 <__cmpsf2+0x40>
 8000e80:	b001      	add	sp, #4
 8000e82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e86:	bf18      	it	ne
 8000e88:	ea90 0f01 	teqne	r0, r1
 8000e8c:	bf58      	it	pl
 8000e8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e92:	bf88      	it	hi
 8000e94:	17c8      	asrhi	r0, r1, #31
 8000e96:	bf38      	it	cc
 8000e98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e9c:	bf18      	it	ne
 8000e9e:	f040 0001 	orrne.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	d102      	bne.n	8000eb0 <__cmpsf2+0x4c>
 8000eaa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eae:	d105      	bne.n	8000ebc <__cmpsf2+0x58>
 8000eb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb4:	d1e4      	bne.n	8000e80 <__cmpsf2+0x1c>
 8000eb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eba:	d0e1      	beq.n	8000e80 <__cmpsf2+0x1c>
 8000ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_cfrcmple>:
 8000ec4:	4684      	mov	ip, r0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	4661      	mov	r1, ip
 8000eca:	e7ff      	b.n	8000ecc <__aeabi_cfcmpeq>

08000ecc <__aeabi_cfcmpeq>:
 8000ecc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ece:	f7ff ffc9 	bl	8000e64 <__cmpsf2>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	bf48      	it	mi
 8000ed6:	f110 0f00 	cmnmi.w	r0, #0
 8000eda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000edc <__aeabi_fcmpeq>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff fff4 	bl	8000ecc <__aeabi_cfcmpeq>
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2001      	moveq	r0, #1
 8000ee8:	2000      	movne	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_fcmplt>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff ffea 	bl	8000ecc <__aeabi_cfcmpeq>
 8000ef8:	bf34      	ite	cc
 8000efa:	2001      	movcc	r0, #1
 8000efc:	2000      	movcs	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmple>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffe0 	bl	8000ecc <__aeabi_cfcmpeq>
 8000f0c:	bf94      	ite	ls
 8000f0e:	2001      	movls	r0, #1
 8000f10:	2000      	movhi	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmpge>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffd2 	bl	8000ec4 <__aeabi_cfrcmple>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpgt>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffc8 	bl	8000ec4 <__aeabi_cfrcmple>
 8000f34:	bf34      	ite	cc
 8000f36:	2001      	movcc	r0, #1
 8000f38:	2000      	movcs	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <println>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void println(char * str){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff f8d9 	bl	800014c <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <println+0x38>)
 8000fa4:	f001 fd47 	bl	8002a36 <HAL_UART_Transmit>
	  char newline[2] = "\r\n";
 8000fa8:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000fac:	81bb      	strh	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 10);
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <println+0x38>)
 8000fb8:	f001 fd3d 	bl	8002a36 <HAL_UART_Transmit>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000a0 	.word	0x200000a0

08000fc8 <updateHumidityAndTemperature>:
  * @retval int
  */

float humidity, temperature;

void updateHumidityAndTemperature(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	uint16_t tmp_temperature, tmp_humidity;

	int ans = SHT11_StartTemperature();
 8000fce:	f000 fae1 	bl	8001594 <SHT11_StartTemperature>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	603b      	str	r3, [r7, #0]
	if(ans == 1){
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d103      	bne.n	8000fe4 <updateHumidityAndTemperature+0x1c>
		tmp_temperature = SHT11_ReadTemperature();
 8000fdc:	f000 fb0a 	bl	80015f4 <SHT11_ReadTemperature>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	80fb      	strh	r3, [r7, #6]
	}

	ans = SHT11_StartHumidity();
 8000fe4:	f000 faee 	bl	80015c4 <SHT11_StartHumidity>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	603b      	str	r3, [r7, #0]
	if(ans == 1){
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <updateHumidityAndTemperature+0x32>
		tmp_humidity = SHT11_ReadHumidity();
 8000ff2:	f000 fb31 	bl	8001658 <SHT11_ReadHumidity>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
	}

	temperature = SHT11_CalcTemp(tmp_temperature);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fb5d 	bl	80016bc <SHT11_CalcTemp>
 8001002:	4603      	mov	r3, r0
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <updateHumidityAndTemperature+0x5c>)
 8001006:	6013      	str	r3, [r2, #0]
	humidity = SHT11_CalcHumidity(tmp_humidity, temperature);
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <updateHumidityAndTemperature+0x5c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fb8d 	bl	8001730 <SHT11_CalcHumidity>
 8001016:	4603      	mov	r3, r0
 8001018:	4a03      	ldr	r2, [pc, #12]	; (8001028 <updateHumidityAndTemperature+0x60>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000098 	.word	0x20000098
 8001028:	2000009c 	.word	0x2000009c

0800102c <sendHumidityAndTemperature>:

void sendHumidityAndTemperature(){
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
	char buffer[20];

	int t = (int) temperature;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <sendHumidityAndTemperature+0x40>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff82 	bl	8000f40 <__aeabi_f2iz>
 800103c:	4603      	mov	r3, r0
 800103e:	61fb      	str	r3, [r7, #28]
	int h = (int) humidity;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <sendHumidityAndTemperature+0x44>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff7b 	bl	8000f40 <__aeabi_f2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	61bb      	str	r3, [r7, #24]

	sprintf(buffer, "A: %d", t);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <sendHumidityAndTemperature+0x48>)
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fe8b 	bl	8002d70 <siprintf>
	println(buffer);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff95 	bl	8000f8c <println>
}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000098 	.word	0x20000098
 8001070:	2000009c 	.word	0x2000009c
 8001074:	080035fc 	.word	0x080035fc

08001078 <main>:


int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fd60 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f812 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f876 	bl	8001174 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001088:	f000 f84a 	bl	8001120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SHT11_Init(GPIOA);
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <main+0x2c>)
 800108e:	f000 fa1d 	bl	80014cc <SHT11_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateHumidityAndTemperature();
 8001092:	f7ff ff99 	bl	8000fc8 <updateHumidityAndTemperature>
	  sendHumidityAndTemperature();
 8001096:	f7ff ffc9 	bl	800102c <sendHumidityAndTemperature>
	  HAL_Delay(3000);
 800109a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800109e:	f000 fdb1 	bl	8001c04 <HAL_Delay>
	  updateHumidityAndTemperature();
 80010a2:	e7f6      	b.n	8001092 <main+0x1a>
 80010a4:	40010800 	.word	0x40010800

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fe52 	bl	8002d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f842 	bl	8002168 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ea:	f000 f859 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f001 faae 	bl	8002668 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001112:	f000 f845 	bl	80011a0 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART1_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800112c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001158:	f001 fc20 	bl	800299c <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f000 f81d 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000a0 	.word	0x200000a0
 8001170:	40013800 	.word	0x40013800

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_GPIO_Init+0x28>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <MX_GPIO_Init+0x28>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <MX_GPIO_Init+0x28>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>

080011aa <nop_delay>:
 *
 * input:
 * 		us - delay microseconds
 */
void nop_delay(uint8_t us)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
    for(uint16_t i = (us*72); i > 0; i--)  // us * (SYSTEM_CORE_CLOCK / 1 000 000)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	81fb      	strh	r3, [r7, #14]
 80011c2:	e003      	b.n	80011cc <nop_delay+0x22>
    {
    	asm("nop");
 80011c4:	bf00      	nop
    for(uint16_t i = (us*72); i > 0; i--)  // us * (SYSTEM_CORE_CLOCK / 1 000 000)
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	81fb      	strh	r3, [r7, #14]
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f8      	bne.n	80011c4 <nop_delay+0x1a>
    }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
	...

080011e0 <SHT11_SetDataIn>:
 * SHT11_SetDataIn
 *
 * Set the operating mode for the SHT11_DATA_PIN as input
 */
void SHT11_SetDataIn(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
//	void  HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin);
//	GPIO_StructInit(&GPIO_InitStructure);

	GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.Pin = SHT11_DATA_PIN;
 80011e6:	2302      	movs	r3, #2
 80011e8:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SHT11_PORT, &GPIO_InitStructure);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <SHT11_SetDataIn+0x24>)
 80011f8:	f000 fe0c 	bl	8001e14 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010800 	.word	0x40010800

08001208 <SHT11_SetDataOut>:
 * SHT11_SetDataOut
 *
 * Set the operating mode for the SHT11_DATA_PIN as output
 */
void SHT11_SetDataOut(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = SHT11_DATA_PIN;
 800120e:	2302      	movs	r3, #2
 8001210:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2302      	movs	r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SHT11_PORT, &GPIO_InitStructure);
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <SHT11_SetDataOut+0x24>)
 8001220:	f000 fdf8 	bl	8001e14 <HAL_GPIO_Init>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010800 	.word	0x40010800

08001230 <SHT11_SetSckOut>:
 * SHT11_SetSckOut
 *
 * Set the operating mode for the SHT11_SCK_PIN as output
 */
void SHT11_SetSckOut(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = SHT11_SCK_PIN;
 8001236:	2304      	movs	r3, #4
 8001238:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2302      	movs	r3, #2
 8001240:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SHT11_PORT, &GPIO_InitStructure);
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <SHT11_SetSckOut+0x24>)
 8001248:	f000 fde4 	bl	8001e14 <HAL_GPIO_Init>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010800 	.word	0x40010800

08001258 <SHT11_TransmissionStart>:
 * SHT11_TransmissionStart
 *
 * Emit "Transmission Start" (TS) sequence
 */
void SHT11_TransmissionStart(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	SHT11_SET_SCK_LOW(); 				//SCK=0;                   //Initial state
 800125c:	2200      	movs	r2, #0
 800125e:	2104      	movs	r1, #4
 8001260:	481f      	ldr	r0, [pc, #124]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 8001262:	f000 ff68 	bl	8002136 <HAL_GPIO_WritePin>
	SHT11_SetDataIn();					// DATA_TRIS = 1;   //pullup resistor brings DATA pin high
 8001266:	f7ff ffbb 	bl	80011e0 <SHT11_SetDataIn>
	SHT11_SET_DATA_HIGH();
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	481c      	ldr	r0, [pc, #112]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 8001270:	f000 ff61 	bl	8002136 <HAL_GPIO_WritePin>
	SHT11_SetDataOut();					//DATA_TRIS=0;
 8001274:	f7ff ffc8 	bl	8001208 <SHT11_SetDataOut>
	nop_delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ff96 	bl	80011aa <nop_delay>
	SHT11_SET_SCK_HIGH(); 				//SCK=1;
 800127e:	2201      	movs	r2, #1
 8001280:	2104      	movs	r1, #4
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 8001284:	f000 ff57 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff ff8e 	bl	80011aa <nop_delay>
	SHT11_SET_DATA_LOW();    			// DATA_WR=0; DATA_TRIS=0;
 800128e:	2200      	movs	r2, #0
 8001290:	2102      	movs	r1, #2
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 8001294:	f000 ff4f 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ff86 	bl	80011aa <nop_delay>
	SHT11_SET_SCK_LOW();				//SCK=0;
 800129e:	2200      	movs	r2, #0
 80012a0:	2104      	movs	r1, #4
 80012a2:	480f      	ldr	r0, [pc, #60]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 80012a4:	f000 ff47 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f7ff ff7e 	bl	80011aa <nop_delay>
	SHT11_SET_SCK_HIGH();				//SCK=1;
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 80012b4:	f000 ff3f 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff ff76 	bl	80011aa <nop_delay>
	SHT11_SET_DATA_HIGH();
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 80012c4:	f000 ff37 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff ff6e 	bl	80011aa <nop_delay>
	SHT11_SET_SCK_LOW();				//SCK=0;
 80012ce:	2200      	movs	r2, #0
 80012d0:	2104      	movs	r1, #4
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SHT11_TransmissionStart+0x88>)
 80012d4:	f000 ff2f 	bl	8002136 <HAL_GPIO_WritePin>
	SHT11_SetDataIn();
 80012d8:	f7ff ff82 	bl	80011e0 <SHT11_SetDataIn>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010800 	.word	0x40010800

080012e4 <SHT11_ReadByte>:
 * 			NACK = 0 - skip
 * return:
 * 		result - received byte
 */
uint8_t SHT11_ReadByte(uint8_t ack)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	SHT11_SetDataIn(); 					//DATA_TRIS = 1; 		//set DATA line an input
 80012f2:	f7ff ff75 	bl	80011e0 <SHT11_SetDataIn>
	SHT11_SET_SCK_LOW();				//SCK = 0;
 80012f6:	2200      	movs	r2, #0
 80012f8:	2104      	movs	r1, #4
 80012fa:	4834      	ldr	r0, [pc, #208]	; (80013cc <SHT11_ReadByte+0xe8>)
 80012fc:	f000 ff1b 	bl	8002136 <HAL_GPIO_WritePin>
	for (uint8_t i = 8; i > 0; i--)     //shift bit for masking
 8001300:	2308      	movs	r3, #8
 8001302:	73bb      	strb	r3, [r7, #14]
 8001304:	e01e      	b.n	8001344 <SHT11_ReadByte+0x60>
	{
		result <<= 1;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
		SHT11_SET_SCK_HIGH();			//SCK=1;   				//clk for SENSI-BUS
 800130c:	2201      	movs	r2, #1
 800130e:	2104      	movs	r1, #4
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <SHT11_ReadByte+0xe8>)
 8001312:	f000 ff10 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 8001316:	2002      	movs	r0, #2
 8001318:	f7ff ff47 	bl	80011aa <nop_delay>
		result |= HAL_GPIO_ReadPin(SHT11_PORT, SHT11_DATA_PIN);  //read bit
 800131c:	2102      	movs	r1, #2
 800131e:	482b      	ldr	r0, [pc, #172]	; (80013cc <SHT11_ReadByte+0xe8>)
 8001320:	f000 fef2 	bl	8002108 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	4313      	orrs	r3, r2
 800132c:	73fb      	strb	r3, [r7, #15]
		SHT11_SET_SCK_LOW();			//SCK=0;
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	4826      	ldr	r0, [pc, #152]	; (80013cc <SHT11_ReadByte+0xe8>)
 8001334:	f000 feff 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff ff36 	bl	80011aa <nop_delay>
	for (uint8_t i = 8; i > 0; i--)     //shift bit for masking
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	3b01      	subs	r3, #1
 8001342:	73bb      	strb	r3, [r7, #14]
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1dd      	bne.n	8001306 <SHT11_ReadByte+0x22>
	}

	if(ack == ACK)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d11c      	bne.n	800138a <SHT11_ReadByte+0xa6>
	{
		// Pull DATA line low for "ack"
		SHT11_SetDataOut();				// DATA_TRIS = 0;
 8001350:	f7ff ff5a 	bl	8001208 <SHT11_SetDataOut>
		SHT11_SET_DATA_LOW();			//DATA_WR = 0;
 8001354:	2200      	movs	r2, #0
 8001356:	2102      	movs	r1, #2
 8001358:	481c      	ldr	r0, [pc, #112]	; (80013cc <SHT11_ReadByte+0xe8>)
 800135a:	f000 feec 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff ff23 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_HIGH();			//SCK=1;
 8001364:	2201      	movs	r2, #1
 8001366:	2104      	movs	r1, #4
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <SHT11_ReadByte+0xe8>)
 800136a:	f000 fee4 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(5);      				//pulse-width approx. 5 us
 800136e:	2005      	movs	r0, #5
 8001370:	f7ff ff1b 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_LOW();			//SCK=0;
 8001374:	2200      	movs	r2, #0
 8001376:	2104      	movs	r1, #4
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <SHT11_ReadByte+0xe8>)
 800137a:	f000 fedc 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff ff13 	bl	80011aa <nop_delay>
		SHT11_SetDataIn();				// DATA_TRIS = 1;       //release DATA-line
 8001384:	f7ff ff2c 	bl	80011e0 <SHT11_SetDataIn>
 8001388:	e01b      	b.n	80013c2 <SHT11_ReadByte+0xde>
	}else{
		// Pull DATA line high for skiping "ack"
		SHT11_SetDataOut();				// DATA_TRIS = 0;
 800138a:	f7ff ff3d 	bl	8001208 <SHT11_SetDataOut>
		SHT11_SET_DATA_HIGH();			//DATA_WR = 0;
 800138e:	2201      	movs	r2, #1
 8001390:	2102      	movs	r1, #2
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <SHT11_ReadByte+0xe8>)
 8001394:	f000 fecf 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff ff06 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_HIGH();			//SCK=1;
 800139e:	2201      	movs	r2, #1
 80013a0:	2104      	movs	r1, #4
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <SHT11_ReadByte+0xe8>)
 80013a4:	f000 fec7 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(5);      				//pulse-width approx. 5 us
 80013a8:	2005      	movs	r0, #5
 80013aa:	f7ff fefe 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_LOW();			//SCK=0;
 80013ae:	2200      	movs	r2, #0
 80013b0:	2104      	movs	r1, #4
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <SHT11_ReadByte+0xe8>)
 80013b4:	f000 febf 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(2);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff fef6 	bl	80011aa <nop_delay>
		SHT11_SetDataIn();				// DATA_TRIS = 1;      //release DATA-line
 80013be:	f7ff ff0f 	bl	80011e0 <SHT11_SetDataIn>
	}
    return result;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010800 	.word	0x40010800

080013d0 <SHT11_WriteByte>:
 * return:
 * 		ACK = 1 	- proper reception of the value
 *		NACK = 0 	- reception failure
 */
uint8_t SHT11_WriteByte(uint8_t value)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	uint8_t ack = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0x80;
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	73bb      	strb	r3, [r7, #14]

	SHT11_SetDataOut();					//DATA_TRIS = 0;
 80013e2:	f7ff ff11 	bl	8001208 <SHT11_SetDataOut>
	for (uint8_t i = 8; i > 0; i--)
 80013e6:	2308      	movs	r3, #8
 80013e8:	737b      	strb	r3, [r7, #13]
 80013ea:	e029      	b.n	8001440 <SHT11_WriteByte+0x70>
	{
		if (value & mask){
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	4013      	ands	r3, r2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <SHT11_WriteByte+0x34>
			SHT11_SET_DATA_HIGH();		// DATA_WR=1;     //masking value with mask , write to SENSI-BUS
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <SHT11_WriteByte+0xb0>)
 80013fe:	f000 fe9a 	bl	8002136 <HAL_GPIO_WritePin>
 8001402:	e004      	b.n	800140e <SHT11_WriteByte+0x3e>
		}else{
			SHT11_SET_DATA_LOW(); 		//DATA_WR=0;
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <SHT11_WriteByte+0xb0>)
 800140a:	f000 fe94 	bl	8002136 <HAL_GPIO_WritePin>
		}
		nop_delay(2);
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fecb 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_HIGH();			//SCK=1;          //clk for SENSI-BUS
 8001414:	2201      	movs	r2, #1
 8001416:	2104      	movs	r1, #4
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <SHT11_WriteByte+0xb0>)
 800141a:	f000 fe8c 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(5);            		//pulse-width approx. 5 us
 800141e:	2005      	movs	r0, #5
 8001420:	f7ff fec3 	bl	80011aa <nop_delay>
		SHT11_SET_SCK_LOW();			//SCK=0;
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4815      	ldr	r0, [pc, #84]	; (8001480 <SHT11_WriteByte+0xb0>)
 800142a:	f000 fe84 	bl	8002136 <HAL_GPIO_WritePin>
		nop_delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff febb 	bl	80011aa <nop_delay>
		mask >>= 1;                     // Shift mask for next data bit
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 8; i > 0; i--)
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	3b01      	subs	r3, #1
 800143e:	737b      	strb	r3, [r7, #13]
 8001440:	7b7b      	ldrb	r3, [r7, #13]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1d2      	bne.n	80013ec <SHT11_WriteByte+0x1c>
	}
	SHT11_SetDataIn();					//DATA_TRIS=1;    //release DATA-line, let SHT11 sensor controls DATA line
 8001446:	f7ff fecb 	bl	80011e0 <SHT11_SetDataIn>

	SHT11_SET_SCK_HIGH();				//SCK=1;
 800144a:	2201      	movs	r2, #1
 800144c:	2104      	movs	r1, #4
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <SHT11_WriteByte+0xb0>)
 8001450:	f000 fe71 	bl	8002136 <HAL_GPIO_WritePin>
	nop_delay(5);						//clk #9 for ack
 8001454:	2005      	movs	r0, #5
 8001456:	f7ff fea8 	bl	80011aa <nop_delay>

	if(HAL_GPIO_ReadPin(SHT11_PORT, SHT11_DATA_PIN) == 0){
 800145a:	2102      	movs	r1, #2
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <SHT11_WriteByte+0xb0>)
 800145e:	f000 fe53 	bl	8002108 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <SHT11_WriteByte+0x9c>
		ack = ACK;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
	}
	SHT11_SET_SCK_LOW();				//SCK=0;
 800146c:	2200      	movs	r2, #0
 800146e:	2104      	movs	r1, #4
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <SHT11_WriteByte+0xb0>)
 8001472:	f000 fe60 	bl	8002136 <HAL_GPIO_WritePin>

	return ack;                        	//error=0 in case of no acknowledge
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010800 	.word	0x40010800

08001484 <SHT11_ReadSR>:
 * return:
 * 		_temp_regval - status register value
 *		NACK = 0 	- command reception failure
 */
uint8_t SHT11_ReadSR(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	uint8_t _temp_regval = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
	if(SHT11_WriteByte(STATUS_REG_R)){
 800148e:	2007      	movs	r0, #7
 8001490:	f7ff ff9e 	bl	80013d0 <SHT11_WriteByte>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d010      	beq.n	80014bc <SHT11_ReadSR+0x38>
		_temp_regval = SHT11_ReadByte(ACK);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff ff22 	bl	80012e4 <SHT11_ReadByte>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
		if(_temp_regval > 0){
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <SHT11_ReadSR+0x38>
			_SHT11.checksum = SHT11_ReadByte(ACK);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff1a 	bl	80012e4 <SHT11_ReadByte>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SHT11_ReadSR+0x44>)
 80014b6:	741a      	strb	r2, [r3, #16]
			return _temp_regval;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	e000      	b.n	80014be <SHT11_ReadSR+0x3a>
		}
	}
	return NACK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000e4 	.word	0x200000e4

080014cc <SHT11_Init>:
 * SHT11_Init
 *
 * Initialize sensor interface
 */
void SHT11_Init(GPIO_TypeDef * port)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint16_t _temp;

	if(port == GPIOA){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <SHT11_Init+0xb4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d10b      	bne.n	80014f4 <SHT11_Init+0x28>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <SHT11_Init+0xb8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <SHT11_Init+0xb8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <SHT11_Init+0xb8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
//		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	}
	if(port == GPIOB){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <SHT11_Init+0xbc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d10b      	bne.n	8001514 <SHT11_Init+0x48>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <SHT11_Init+0xb8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <SHT11_Init+0xb8>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <SHT11_Init+0xb8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
//		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	}
	if(port == GPIOC){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <SHT11_Init+0xc0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d10b      	bne.n	8001534 <SHT11_Init+0x68>
		 __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <SHT11_Init+0xb8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <SHT11_Init+0xb8>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <SHT11_Init+0xb8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
//		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	}

	SHT11_SetSckOut();
 8001534:	f7ff fe7c 	bl	8001230 <SHT11_SetSckOut>
	SHT11_SetDataIn();
 8001538:	f7ff fe52 	bl	80011e0 <SHT11_SetDataIn>
	_SHT11.delay = SHT11_M_DELAY_14_BIT;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <SHT11_Init+0xc4>)
 800153e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001542:	825a      	strh	r2, [r3, #18]
	_SHT11.resolution = SHT11_M_RES_HIGH;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SHT11_Init+0xc4>)
 8001546:	2201      	movs	r2, #1
 8001548:	745a      	strb	r2, [r3, #17]
	_SHT11.raw_temperature = 0;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <SHT11_Init+0xc4>)
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
	_SHT11.raw_humidity = 0;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <SHT11_Init+0xc4>)
 8001552:	2200      	movs	r2, #0
 8001554:	805a      	strh	r2, [r3, #2]
	_SHT11.checksum = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <SHT11_Init+0xc4>)
 8001558:	2200      	movs	r2, #0
 800155a:	741a      	strb	r2, [r3, #16]

	_temp = SHT11_ReadSR();
 800155c:	f7ff ff92 	bl	8001484 <SHT11_ReadSR>
 8001560:	4603      	mov	r3, r0
 8001562:	82fb      	strh	r3, [r7, #22]
	if(_temp && 0b10000000){
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <SHT11_Init+0xa6>
		// low resolution
		_SHT11.resolution = SHT11_M_RES_LOW;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <SHT11_Init+0xc4>)
 800156c:	2200      	movs	r2, #0
 800156e:	745a      	strb	r2, [r3, #17]
	}else{
		// high resolution
		_SHT11.resolution = SHT11_M_RES_HIGH;
	}
}
 8001570:	e002      	b.n	8001578 <SHT11_Init+0xac>
		_SHT11.resolution = SHT11_M_RES_HIGH;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <SHT11_Init+0xc4>)
 8001574:	2201      	movs	r2, #1
 8001576:	745a      	strb	r2, [r3, #17]
}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010800 	.word	0x40010800
 8001584:	40021000 	.word	0x40021000
 8001588:	40010c00 	.word	0x40010c00
 800158c:	40011000 	.word	0x40011000
 8001590:	200000e4 	.word	0x200000e4

08001594 <SHT11_StartTemperature>:
 * return:
 * 		ACK = 1 	- proper reception of the command
 *		NACK = 0 	- command reception failure
 */
uint8_t SHT11_StartTemperature(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	_SHT11.reset_cnt = 0;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <SHT11_StartTemperature+0x2c>)
 800159a:	2200      	movs	r2, #0
 800159c:	751a      	strb	r2, [r3, #20]
	SHT11_TransmissionStart();
 800159e:	f7ff fe5b 	bl	8001258 <SHT11_TransmissionStart>
	if(SHT11_WriteByte(MEASURE_TEMP)){
 80015a2:	2003      	movs	r0, #3
 80015a4:	f7ff ff14 	bl	80013d0 <SHT11_WriteByte>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <SHT11_StartTemperature+0x26>
		_SHT11.delay = SHT11_M_DELAY_14_BIT;
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SHT11_StartTemperature+0x2c>)
 80015b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015b4:	825a      	strh	r2, [r3, #18]
		return ACK;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <SHT11_StartTemperature+0x28>
	}
	return NACK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200000e4 	.word	0x200000e4

080015c4 <SHT11_StartHumidity>:
 * return:
 * 		ACK = 1 	- proper reception of the command
 *		NACK = 0 	- command reception failure
 */
uint8_t SHT11_StartHumidity(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	_SHT11.reset_cnt = 0;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <SHT11_StartHumidity+0x2c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	751a      	strb	r2, [r3, #20]
	SHT11_TransmissionStart();
 80015ce:	f7ff fe43 	bl	8001258 <SHT11_TransmissionStart>
	if(SHT11_WriteByte(MEASURE_HUMI)){
 80015d2:	2005      	movs	r0, #5
 80015d4:	f7ff fefc 	bl	80013d0 <SHT11_WriteByte>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <SHT11_StartHumidity+0x24>
		_SHT11.delay = SHT11_M_DELAY_12_BIT;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SHT11_StartHumidity+0x2c>)
 80015e0:	2250      	movs	r2, #80	; 0x50
 80015e2:	825a      	strh	r2, [r3, #18]
		return ACK;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <SHT11_StartHumidity+0x26>
	}
	return NACK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000e4 	.word	0x200000e4

080015f4 <SHT11_ReadTemperature>:
 * return:
 * 		raw_temperature	- in case of successful data reception
 *		zero - in case of data reception failure
 */
uint16_t SHT11_ReadTemperature(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	uint16_t _msb;
	uint16_t _lsb;
	uint16_t _temp;

	if(HAL_GPIO_ReadPin(SHT11_PORT, SHT11_DATA_PIN) == 0){
 80015fa:	2102      	movs	r1, #2
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <SHT11_ReadTemperature+0x5c>)
 80015fe:	f000 fd83 	bl	8002108 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11d      	bne.n	8001644 <SHT11_ReadTemperature+0x50>
		_msb = SHT11_ReadByte(ACK);     //read the first byte (MSB)
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fe6b 	bl	80012e4 <SHT11_ReadByte>
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
		_lsb = SHT11_ReadByte(ACK);      //read the second byte (LSB)
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fe66 	bl	80012e4 <SHT11_ReadByte>
 8001618:	4603      	mov	r3, r0
 800161a:	80bb      	strh	r3, [r7, #4]
		_SHT11.checksum  = SHT11_ReadByte(ACK);    //read checksum
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fe61 	bl	80012e4 <SHT11_ReadByte>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <SHT11_ReadTemperature+0x60>)
 8001628:	741a      	strb	r2, [r3, #16]
		_temp = (_msb << 8) | (_lsb);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	807b      	strh	r3, [r7, #2]
		_SHT11.raw_temperature = _temp;
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <SHT11_ReadTemperature+0x60>)
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	8013      	strh	r3, [r2, #0]
		return _temp;
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	e000      	b.n	8001646 <SHT11_ReadTemperature+0x52>
	}
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40010800 	.word	0x40010800
 8001654:	200000e4 	.word	0x200000e4

08001658 <SHT11_ReadHumidity>:
 * return:
 * 		raw_humidity - in case of successful data reception
 *		zero - in case of data reception failure
 */
uint16_t SHT11_ReadHumidity(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	uint16_t _msb;
	uint16_t _lsb;
	uint16_t _temp;

	if(HAL_GPIO_ReadPin(SHT11_PORT, SHT11_DATA_PIN) == 0){
 800165e:	2102      	movs	r1, #2
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <SHT11_ReadHumidity+0x5c>)
 8001662:	f000 fd51 	bl	8002108 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11d      	bne.n	80016a8 <SHT11_ReadHumidity+0x50>
		_msb = SHT11_ReadByte(ACK);     //read the first byte (MSB)
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fe39 	bl	80012e4 <SHT11_ReadByte>
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
		_lsb = SHT11_ReadByte(ACK);      //read the second byte (LSB)
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff fe34 	bl	80012e4 <SHT11_ReadByte>
 800167c:	4603      	mov	r3, r0
 800167e:	80bb      	strh	r3, [r7, #4]
		_SHT11.checksum  = SHT11_ReadByte(ACK);    //read checksum
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fe2f 	bl	80012e4 <SHT11_ReadByte>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <SHT11_ReadHumidity+0x60>)
 800168c:	741a      	strb	r2, [r3, #16]
		_temp = (_msb << 8) | (_lsb);
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	807b      	strh	r3, [r7, #2]
		_SHT11.raw_humidity= _temp;
 800169e:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <SHT11_ReadHumidity+0x60>)
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	8053      	strh	r3, [r2, #2]
		return _temp;
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	e000      	b.n	80016aa <SHT11_ReadHumidity+0x52>
	}
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40010800 	.word	0x40010800
 80016b8:	200000e4 	.word	0x200000e4

080016bc <SHT11_CalcTemp>:
 * 		raw_temperature - result of measurment; _SHT11.raw_temperature can be passed
 * return:
 * 		temperature - calculated real temperature in degC
 */
float SHT11_CalcTemp(uint16_t raw_temperature)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	float _temp_t;
	if (_SHT11.resolution == SHT11_M_RES_LOW){
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <SHT11_CalcTemp+0x64>)
 80016c8:	7c5b      	ldrb	r3, [r3, #17]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d110      	bne.n	80016f0 <SHT11_CalcTemp+0x34>
		_temp_t = T1 + T2l * (float)raw_temperature;
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa17 	bl	8000b04 <__aeabi_ui2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4912      	ldr	r1, [pc, #72]	; (8001724 <SHT11_CalcTemp+0x68>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fa6a 	bl	8000bb4 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4911      	ldr	r1, [pc, #68]	; (8001728 <SHT11_CalcTemp+0x6c>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f95b 	bl	80009a0 <__aeabi_fsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e00f      	b.n	8001710 <SHT11_CalcTemp+0x54>
	}else{
		_temp_t = T1 + T2h * (float)raw_temperature;
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fa06 	bl	8000b04 <__aeabi_ui2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <SHT11_CalcTemp+0x70>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa59 	bl	8000bb4 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	4908      	ldr	r1, [pc, #32]	; (8001728 <SHT11_CalcTemp+0x6c>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f94a 	bl	80009a0 <__aeabi_fsub>
 800170c:	4603      	mov	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]
	}
	_SHT11.temperature = _temp_t;
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <SHT11_CalcTemp+0x64>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6053      	str	r3, [r2, #4]
	return _temp_t;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200000e4 	.word	0x200000e4
 8001724:	3d23d70a 	.word	0x3d23d70a
 8001728:	421e6666 	.word	0x421e6666
 800172c:	3c23d70a 	.word	0x3c23d70a

08001730 <SHT11_CalcHumidity>:
 * 		temperature - calculated real temperature in degC; _SHT11.temperature can be passed
 * return:
 * 		humidity - calculated real humidity in %
 */
float SHT11_CalcHumidity(uint16_t raw_humidity, float temperature)
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
	float _temp_h;
	if (_SHT11.resolution == SHT11_M_RES_LOW){
 800173c:	4b71      	ldr	r3, [pc, #452]	; (8001904 <SHT11_CalcHumidity+0x1d4>)
 800173e:	7c5b      	ldrb	r3, [r3, #17]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d16c      	bne.n	800181e <SHT11_CalcHumidity+0xee>
		_temp_h = C1 + C2l * raw_humidity + C3l * raw_humidity * raw_humidity;
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9e0 	bl	8000b0c <__aeabi_i2f>
 800174c:	4603      	mov	r3, r0
 800174e:	496e      	ldr	r1, [pc, #440]	; (8001908 <SHT11_CalcHumidity+0x1d8>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa2f 	bl	8000bb4 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	496c      	ldr	r1, [pc, #432]	; (800190c <SHT11_CalcHumidity+0x1dc>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f920 	bl	80009a0 <__aeabi_fsub>
 8001760:	4603      	mov	r3, r0
 8001762:	461c      	mov	r4, r3
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f9d0 	bl	8000b0c <__aeabi_i2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4968      	ldr	r1, [pc, #416]	; (8001910 <SHT11_CalcHumidity+0x1e0>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa1f 	bl	8000bb4 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	461d      	mov	r5, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f9c5 	bl	8000b0c <__aeabi_i2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4619      	mov	r1, r3
 8001786:	4628      	mov	r0, r5
 8001788:	f7ff fa14 	bl	8000bb4 <__aeabi_fmul>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f907 	bl	80009a4 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]
		if(temperature > 50){
 800179a:	495e      	ldr	r1, [pc, #376]	; (8001914 <SHT11_CalcHumidity+0x1e4>)
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f7ff fbc5 	bl	8000f2c <__aeabi_fcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a5 	beq.w	80018f4 <SHT11_CalcHumidity+0x1c4>
			_temp_h = (temperature - 25.0) * (T1 + T2l * raw_humidity) + _temp_h;
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f7fe fe3a 	bl	8000424 <__aeabi_f2d>
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <SHT11_CalcHumidity+0x1e8>)
 80017b6:	f7fe fcd5 	bl	8000164 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4614      	mov	r4, r2
 80017c0:	461d      	mov	r5, r3
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff f9a1 	bl	8000b0c <__aeabi_i2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4953      	ldr	r1, [pc, #332]	; (800191c <SHT11_CalcHumidity+0x1ec>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f9f0 	bl	8000bb4 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4952      	ldr	r1, [pc, #328]	; (8001920 <SHT11_CalcHumidity+0x1f0>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f8e1 	bl	80009a0 <__aeabi_fsub>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe1f 	bl	8000424 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7fe fe71 	bl	80004d4 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7fe fe12 	bl	8000424 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fcae 	bl	8000168 <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f870 	bl	80008f8 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e06a      	b.n	80018f4 <SHT11_CalcHumidity+0x1c4>
		}
	}else{
		_temp_h = C1 + C2h * raw_humidity + C3h * raw_humidity * raw_humidity;
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f973 	bl	8000b0c <__aeabi_i2f>
 8001826:	4603      	mov	r3, r0
 8001828:	493e      	ldr	r1, [pc, #248]	; (8001924 <SHT11_CalcHumidity+0x1f4>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f9c2 	bl	8000bb4 <__aeabi_fmul>
 8001830:	4603      	mov	r3, r0
 8001832:	4936      	ldr	r1, [pc, #216]	; (800190c <SHT11_CalcHumidity+0x1dc>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f8b3 	bl	80009a0 <__aeabi_fsub>
 800183a:	4603      	mov	r3, r0
 800183c:	461c      	mov	r4, r3
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f963 	bl	8000b0c <__aeabi_i2f>
 8001846:	4603      	mov	r3, r0
 8001848:	4937      	ldr	r1, [pc, #220]	; (8001928 <SHT11_CalcHumidity+0x1f8>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f9b2 	bl	8000bb4 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	461d      	mov	r5, r3
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f958 	bl	8000b0c <__aeabi_i2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4619      	mov	r1, r3
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff f9a7 	bl	8000bb4 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff f89a 	bl	80009a4 <__addsf3>
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
		if(temperature > 50){
 8001874:	4927      	ldr	r1, [pc, #156]	; (8001914 <SHT11_CalcHumidity+0x1e4>)
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f7ff fb58 	bl	8000f2c <__aeabi_fcmpgt>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d038      	beq.n	80018f4 <SHT11_CalcHumidity+0x1c4>
			_temp_h = (temperature - 25.0) * (T1 + T2h * raw_humidity) + _temp_h;
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f7fe fdce 	bl	8000424 <__aeabi_f2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <SHT11_CalcHumidity+0x1e8>)
 800188e:	f7fe fc69 	bl	8000164 <__aeabi_dsub>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	461d      	mov	r5, r3
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f935 	bl	8000b0c <__aeabi_i2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4921      	ldr	r1, [pc, #132]	; (800192c <SHT11_CalcHumidity+0x1fc>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f984 	bl	8000bb4 <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	491c      	ldr	r1, [pc, #112]	; (8001920 <SHT11_CalcHumidity+0x1f0>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f875 	bl	80009a0 <__aeabi_fsub>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdb3 	bl	8000424 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fe05 	bl	80004d4 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4614      	mov	r4, r2
 80018d0:	461d      	mov	r5, r3
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7fe fda6 	bl	8000424 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc42 	bl	8000168 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f804 	bl	80008f8 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
		}
	}

//	if (_temp_h > 100.0) _temp_h = 100.0;		// Uncomment if you want to limit output values with their phisical ranges
//	if (_temp_h < 0.1) _temp_h = 0.1;
	_SHT11.humidity = _temp_h;
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <SHT11_CalcHumidity+0x1d4>)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6093      	str	r3, [r2, #8]
	return _temp_h;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	200000e4 	.word	0x200000e4
 8001908:	3f1652bd 	.word	0x3f1652bd
 800190c:	4002fec5 	.word	0x4002fec5
 8001910:	b9d6253b 	.word	0xb9d6253b
 8001914:	42480000 	.word	0x42480000
 8001918:	40390000 	.word	0x40390000
 800191c:	3d23d70a 	.word	0x3d23d70a
 8001920:	421e6666 	.word	0x421e6666
 8001924:	3d1652bd 	.word	0x3d1652bd
 8001928:	b5d624f6 	.word	0xb5d624f6
 800192c:	3c23d70a 	.word	0x3c23d70a

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_MspInit+0x5c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a14      	ldr	r2, [pc, #80]	; (800198c <HAL_MspInit+0x5c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_MspInit+0x5c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_MspInit+0x5c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_MspInit+0x5c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_MspInit+0x5c>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_MspInit+0x60>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_MspInit+0x60>)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000

08001994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_UART_MspInit+0x8c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d131      	bne.n	8001a18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x90>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <HAL_UART_MspInit+0x94>)
 80019fa:	f000 fa0b 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_UART_MspInit+0x94>)
 8001a14:	f000 f9fe 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010800 	.word	0x40010800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f8ab 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <_sbrk+0x5c>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <_sbrk+0x60>)
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_sbrk+0x64>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <_sbrk+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d207      	bcs.n	8001abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aac:	f001 f92e 	bl	8002d0c <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e009      	b.n	8001ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <_sbrk+0x64>)
 8001acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20002800 	.word	0x20002800
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	2000008c 	.word	0x2000008c
 8001ae4:	20000110 	.word	0x20000110

08001ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1a:	f7ff ffe5 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f001 f8fb 	bl	8002d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b22:	f7ff faa9 	bl	8001078 <main>
  bx lr
 8001b26:	4770      	bx	lr
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b30:	08003668 	.word	0x08003668
  ldr r2, =_sbss
 8001b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b38:	20000110 	.word	0x20000110

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x28>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 f92b 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f000 f808 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fee8 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f935 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f90b 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x20>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000008 	.word	0x20000008
 8001bec:	200000fc 	.word	0x200000fc

08001bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GetTick+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	200000fc 	.word	0x200000fc

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffe0 	bl	8001bf0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff90 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff49 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff5e 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff90 	bl	8001d04 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5f 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffb0 	bl	8001d68 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e148      	b.n	80020ba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8137 	bne.w	80020b4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4aa3      	ldr	r2, [pc, #652]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4aa1      	ldr	r2, [pc, #644]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4aa1      	ldr	r2, [pc, #644]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a9f      	ldr	r2, [pc, #636]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a9f      	ldr	r2, [pc, #636]	; (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a9d      	ldr	r2, [pc, #628]	; (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a9d      	ldr	r2, [pc, #628]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a9b      	ldr	r2, [pc, #620]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a9b      	ldr	r2, [pc, #620]	; (80020e8 <HAL_GPIO_Init+0x2d4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a99      	ldr	r2, [pc, #612]	; (80020e8 <HAL_GPIO_Init+0x2d4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a82      	ldr	r2, [pc, #520]	; (80020ec <HAL_GPIO_Init+0x2d8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8090 	beq.w	80020b4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <HAL_GPIO_Init+0x2dc>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_GPIO_Init+0x2dc>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_GPIO_Init+0x2dc>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a51      	ldr	r2, [pc, #324]	; (80020f4 <HAL_GPIO_Init+0x2e0>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a49      	ldr	r2, [pc, #292]	; (80020f8 <HAL_GPIO_Init+0x2e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x1dc>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_GPIO_Init+0x2ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_Init+0x1d8>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x1e2>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x1e2>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x1e2>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002006:	493b      	ldr	r1, [pc, #236]	; (80020f4 <HAL_GPIO_Init+0x2e0>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4937      	ldr	r1, [pc, #220]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4933      	ldr	r1, [pc, #204]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002038:	4013      	ands	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002048:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	492d      	ldr	r1, [pc, #180]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4929      	ldr	r1, [pc, #164]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4923      	ldr	r1, [pc, #140]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	491f      	ldr	r1, [pc, #124]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002088:	4013      	ands	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4919      	ldr	r1, [pc, #100]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4915      	ldr	r1, [pc, #84]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3301      	adds	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f aeaf 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	372c      	adds	r7, #44	; 0x2c
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	10320000 	.word	0x10320000
 80020dc:	10310000 	.word	0x10310000
 80020e0:	10220000 	.word	0x10220000
 80020e4:	10210000 	.word	0x10210000
 80020e8:	10120000 	.word	0x10120000
 80020ec:	10110000 	.word	0x10110000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00
 8002100:	40011000 	.word	0x40011000
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e001      	b.n	800212a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
 8002142:	4613      	mov	r3, r2
 8002144:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002146:	787b      	ldrb	r3, [r7, #1]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214c:	887a      	ldrh	r2, [r7, #2]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002152:	e003      	b.n	800215c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	041a      	lsls	r2, r3, #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e26c      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8087 	beq.w	8002296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002188:	4b92      	ldr	r3, [pc, #584]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b04      	cmp	r3, #4
 8002192:	d00c      	beq.n	80021ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d112      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5e>
 80021a0:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ae:	4b89      	ldr	r3, [pc, #548]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d06c      	beq.n	8002294 <HAL_RCC_OscConfig+0x12c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d168      	bne.n	8002294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e246      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x76>
 80021d0:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e02e      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x98>
 80021e6:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7a      	ldr	r2, [pc, #488]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a77      	ldr	r2, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0xbc>
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a67      	ldr	r2, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fcd4 	bl	8001bf0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fcd0 	bl	8001bf0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1fa      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xe4>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcc0 	bl	8001bf0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fcbc 	bl	8001bf0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1e6      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x10c>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x18c>
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x176>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1ba      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4939      	ldr	r1, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x270>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fc75 	bl	8001bf0 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fc71 	bl	8001bf0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e19b      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4927      	ldr	r1, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x270>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff fc54 	bl	8001bf0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234c:	f7ff fc50 	bl	8001bf0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e17a      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03a      	beq.n	80023ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d019      	beq.n	80023b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_RCC_OscConfig+0x274>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fc34 	bl	8001bf0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc30 	bl	8001bf0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e15a      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f000 fad8 	bl	8002960 <RCC_Delay>
 80023b0:	e01c      	b.n	80023ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RCC_OscConfig+0x274>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fc1a 	bl	8001bf0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023be:	e00f      	b.n	80023e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc16 	bl	8001bf0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d908      	bls.n	80023e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e140      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	42420000 	.word	0x42420000
 80023dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e9      	bne.n	80023c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a6 	beq.w	8002546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b97      	ldr	r3, [pc, #604]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b94      	ldr	r3, [pc, #592]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a93      	ldr	r2, [pc, #588]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a8a      	ldr	r2, [pc, #552]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7ff fbd7 	bl	8001bf0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7ff fbd3 	bl	8001bf0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0fd      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x312>
 800246c:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	e02d      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x334>
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b73      	ldr	r3, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a72      	ldr	r2, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	e01c      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x356>
 80024a4:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a6c      	ldr	r2, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d015      	beq.n	800250a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff fb87 	bl	8001bf0 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7ff fb83 	bl	8001bf0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0ab      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ee      	beq.n	80024e6 <HAL_RCC_OscConfig+0x37e>
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff fb71 	bl	8001bf0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fb6d 	bl	8001bf0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e095      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ee      	bne.n	8002512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8081 	beq.w	8002652 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d061      	beq.n	8002620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d146      	bne.n	80025f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fb41 	bl	8001bf0 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7ff fb3d 	bl	8001bf0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e067      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d108      	bne.n	80025ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	492d      	ldr	r1, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a19      	ldr	r1, [r3, #32]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	430b      	orrs	r3, r1
 80025be:	4927      	ldr	r1, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff fb11 	bl	8001bf0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7ff fb0d 	bl	8001bf0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e037      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x46a>
 80025f0:	e02f      	b.n	8002652 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fafa 	bl	8001bf0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff faf6 	bl	8001bf0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e020      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x498>
 800261e:	e018      	b.n	8002652 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e013      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	42420060 	.word	0x42420060

08002668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4965      	ldr	r1, [pc, #404]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7ff fa4a 	bl	8001bf0 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7ff fa46 	bl	8001bf0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4922      	ldr	r1, [pc, #136]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f9a8 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08003614 	.word	0x08003614
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b490      	push	{r4, r7}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002844:	1d3c      	adds	r4, r7, #4
 8002846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800284c:	f240 2301 	movw	r3, #513	; 0x201
 8002850:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x46>
 800287a:	e02d      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287e:	623b      	str	r3, [r7, #32]
      break;
 8002880:	e02d      	b.n	80028de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	0c9b      	lsrs	r3, r3, #18
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800288e:	4413      	add	r3, r2
 8002890:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002894:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c5b      	lsrs	r3, r3, #17
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ae:	4413      	add	r3, r2
 80028b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	fb02 f203 	mul.w	r2, r2, r3
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	623b      	str	r3, [r7, #32]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028da:	623b      	str	r3, [r7, #32]
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	6a3b      	ldr	r3, [r7, #32]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc90      	pop	{r4, r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	08003604 	.word	0x08003604
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	003d0900 	.word	0x003d0900

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <HAL_RCC_GetHCLKFreq+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff2 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08003624 	.word	0x08003624

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffde 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0adb      	lsrs	r3, r3, #11
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	08003624 	.word	0x08003624

08002960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <RCC_Delay+0x34>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <RCC_Delay+0x38>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a5b      	lsrs	r3, r3, #9
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800297c:	bf00      	nop
  }
  while (Delay --);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	60fa      	str	r2, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <RCC_Delay+0x1c>
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000000 	.word	0x20000000
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e03f      	b.n	8002a2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe ffe6 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f905 	bl	8002bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08a      	sub	sp, #40	; 0x28
 8002a3a:	af02      	add	r7, sp, #8
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d17c      	bne.n	8002b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_Transmit+0x2c>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e075      	b.n	8002b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Transmit+0x3e>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e06e      	b.n	8002b52 <HAL_UART_Transmit+0x11c>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2221      	movs	r2, #33	; 0x21
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a8a:	f7ff f8b1 	bl	8001bf0 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	88fa      	ldrh	r2, [r7, #6]
 8002a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_UART_Transmit+0x82>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e003      	b.n	8002ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac8:	e02a      	b.n	8002b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f840 	bl	8002b5a <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e036      	b.n	8002b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10b      	bne.n	8002b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3302      	adds	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e007      	b.n	8002b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1cf      	bne.n	8002aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f810 	bl	8002b5a <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e006      	b.n	8002b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6a:	e02c      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d028      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7a:	f7ff f839 	bl	8001bf0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d21d      	bcs.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e00f      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d0c3      	beq.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c2a:	f023 030c 	bic.w	r3, r3, #12
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <UART_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d103      	bne.n	8002c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fe6e 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	e002      	b.n	8002c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7ff fe56 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009a      	lsls	r2, r3, #2
 8002c70:	441a      	add	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <UART_SetConfig+0x118>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	0119      	lsls	r1, r3, #4
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009a      	lsls	r2, r3, #2
 8002c90:	441a      	add	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <UART_SetConfig+0x118>)
 8002c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2064      	movs	r0, #100	; 0x64
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	3332      	adds	r3, #50	; 0x32
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <UART_SetConfig+0x118>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbc:	4419      	add	r1, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <UART_SetConfig+0x118>)
 8002cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2064      	movs	r0, #100	; 0x64
 8002cde:	fb00 f303 	mul.w	r3, r0, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	; 0x32
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <UART_SetConfig+0x118>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013800 	.word	0x40013800
 8002d08:	51eb851f 	.word	0x51eb851f

08002d0c <__errno>:
 8002d0c:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <__errno+0x8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	4d0c      	ldr	r5, [pc, #48]	; (8002d50 <__libc_init_array+0x38>)
 8002d1e:	4c0d      	ldr	r4, [pc, #52]	; (8002d54 <__libc_init_array+0x3c>)
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	42a6      	cmp	r6, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	f000 fc5c 	bl	80035e4 <_init>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	4d0a      	ldr	r5, [pc, #40]	; (8002d58 <__libc_init_array+0x40>)
 8002d30:	4c0a      	ldr	r4, [pc, #40]	; (8002d5c <__libc_init_array+0x44>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	42a6      	cmp	r6, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d40:	4798      	blx	r3
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4a:	4798      	blx	r3
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	08003660 	.word	0x08003660
 8002d54:	08003660 	.word	0x08003660
 8002d58:	08003660 	.word	0x08003660
 8002d5c:	08003664 	.word	0x08003664

08002d60 <memset>:
 8002d60:	4603      	mov	r3, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d100      	bne.n	8002d6a <memset+0xa>
 8002d68:	4770      	bx	lr
 8002d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6e:	e7f9      	b.n	8002d64 <memset+0x4>

08002d70 <siprintf>:
 8002d70:	b40e      	push	{r1, r2, r3}
 8002d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d76:	b500      	push	{lr}
 8002d78:	b09c      	sub	sp, #112	; 0x70
 8002d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d7c:	9002      	str	r0, [sp, #8]
 8002d7e:	9006      	str	r0, [sp, #24]
 8002d80:	9107      	str	r1, [sp, #28]
 8002d82:	9104      	str	r1, [sp, #16]
 8002d84:	4808      	ldr	r0, [pc, #32]	; (8002da8 <siprintf+0x38>)
 8002d86:	4909      	ldr	r1, [pc, #36]	; (8002dac <siprintf+0x3c>)
 8002d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d8c:	9105      	str	r1, [sp, #20]
 8002d8e:	6800      	ldr	r0, [r0, #0]
 8002d90:	a902      	add	r1, sp, #8
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	f000 f868 	bl	8002e68 <_svfiprintf_r>
 8002d98:	2200      	movs	r2, #0
 8002d9a:	9b02      	ldr	r3, [sp, #8]
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	b01c      	add	sp, #112	; 0x70
 8002da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002da4:	b003      	add	sp, #12
 8002da6:	4770      	bx	lr
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	ffff0208 	.word	0xffff0208

08002db0 <__ssputs_r>:
 8002db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	688e      	ldr	r6, [r1, #8]
 8002db6:	4682      	mov	sl, r0
 8002db8:	429e      	cmp	r6, r3
 8002dba:	460c      	mov	r4, r1
 8002dbc:	4690      	mov	r8, r2
 8002dbe:	461f      	mov	r7, r3
 8002dc0:	d838      	bhi.n	8002e34 <__ssputs_r+0x84>
 8002dc2:	898a      	ldrh	r2, [r1, #12]
 8002dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dc8:	d032      	beq.n	8002e30 <__ssputs_r+0x80>
 8002dca:	6825      	ldr	r5, [r4, #0]
 8002dcc:	6909      	ldr	r1, [r1, #16]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	eba5 0901 	sub.w	r9, r5, r1
 8002dd4:	6965      	ldr	r5, [r4, #20]
 8002dd6:	444b      	add	r3, r9
 8002dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002de0:	106d      	asrs	r5, r5, #1
 8002de2:	429d      	cmp	r5, r3
 8002de4:	bf38      	it	cc
 8002de6:	461d      	movcc	r5, r3
 8002de8:	0553      	lsls	r3, r2, #21
 8002dea:	d531      	bpl.n	8002e50 <__ssputs_r+0xa0>
 8002dec:	4629      	mov	r1, r5
 8002dee:	f000 fb53 	bl	8003498 <_malloc_r>
 8002df2:	4606      	mov	r6, r0
 8002df4:	b950      	cbnz	r0, 8002e0c <__ssputs_r+0x5c>
 8002df6:	230c      	movs	r3, #12
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f8ca 3000 	str.w	r3, [sl]
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	6921      	ldr	r1, [r4, #16]
 8002e10:	f000 face 	bl	80033b0 <memcpy>
 8002e14:	89a3      	ldrh	r3, [r4, #12]
 8002e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	81a3      	strh	r3, [r4, #12]
 8002e20:	6126      	str	r6, [r4, #16]
 8002e22:	444e      	add	r6, r9
 8002e24:	6026      	str	r6, [r4, #0]
 8002e26:	463e      	mov	r6, r7
 8002e28:	6165      	str	r5, [r4, #20]
 8002e2a:	eba5 0509 	sub.w	r5, r5, r9
 8002e2e:	60a5      	str	r5, [r4, #8]
 8002e30:	42be      	cmp	r6, r7
 8002e32:	d900      	bls.n	8002e36 <__ssputs_r+0x86>
 8002e34:	463e      	mov	r6, r7
 8002e36:	4632      	mov	r2, r6
 8002e38:	4641      	mov	r1, r8
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	f000 fac6 	bl	80033cc <memmove>
 8002e40:	68a3      	ldr	r3, [r4, #8]
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	1b9b      	subs	r3, r3, r6
 8002e46:	4432      	add	r2, r6
 8002e48:	2000      	movs	r0, #0
 8002e4a:	60a3      	str	r3, [r4, #8]
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	e7db      	b.n	8002e08 <__ssputs_r+0x58>
 8002e50:	462a      	mov	r2, r5
 8002e52:	f000 fb7b 	bl	800354c <_realloc_r>
 8002e56:	4606      	mov	r6, r0
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d1e1      	bne.n	8002e20 <__ssputs_r+0x70>
 8002e5c:	4650      	mov	r0, sl
 8002e5e:	6921      	ldr	r1, [r4, #16]
 8002e60:	f000 face 	bl	8003400 <_free_r>
 8002e64:	e7c7      	b.n	8002df6 <__ssputs_r+0x46>
	...

08002e68 <_svfiprintf_r>:
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	898b      	ldrh	r3, [r1, #12]
 8002e70:	4607      	mov	r7, r0
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	460d      	mov	r5, r1
 8002e76:	4614      	mov	r4, r2
 8002e78:	b09d      	sub	sp, #116	; 0x74
 8002e7a:	d50e      	bpl.n	8002e9a <_svfiprintf_r+0x32>
 8002e7c:	690b      	ldr	r3, [r1, #16]
 8002e7e:	b963      	cbnz	r3, 8002e9a <_svfiprintf_r+0x32>
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	f000 fb09 	bl	8003498 <_malloc_r>
 8002e86:	6028      	str	r0, [r5, #0]
 8002e88:	6128      	str	r0, [r5, #16]
 8002e8a:	b920      	cbnz	r0, 8002e96 <_svfiprintf_r+0x2e>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	e0d1      	b.n	800303a <_svfiprintf_r+0x1d2>
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	616b      	str	r3, [r5, #20]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ea4:	2330      	movs	r3, #48	; 0x30
 8002ea6:	f04f 0901 	mov.w	r9, #1
 8002eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003054 <_svfiprintf_r+0x1ec>
 8002eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eb6:	4623      	mov	r3, r4
 8002eb8:	469a      	mov	sl, r3
 8002eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ebe:	b10a      	cbz	r2, 8002ec4 <_svfiprintf_r+0x5c>
 8002ec0:	2a25      	cmp	r2, #37	; 0x25
 8002ec2:	d1f9      	bne.n	8002eb8 <_svfiprintf_r+0x50>
 8002ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ec8:	d00b      	beq.n	8002ee2 <_svfiprintf_r+0x7a>
 8002eca:	465b      	mov	r3, fp
 8002ecc:	4622      	mov	r2, r4
 8002ece:	4629      	mov	r1, r5
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f7ff ff6d 	bl	8002db0 <__ssputs_r>
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	f000 80aa 	beq.w	8003030 <_svfiprintf_r+0x1c8>
 8002edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ede:	445a      	add	r2, fp
 8002ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8002ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a2 	beq.w	8003030 <_svfiprintf_r+0x1c8>
 8002eec:	2300      	movs	r3, #0
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ef6:	f10a 0a01 	add.w	sl, sl, #1
 8002efa:	9304      	str	r3, [sp, #16]
 8002efc:	9307      	str	r3, [sp, #28]
 8002efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f02:	931a      	str	r3, [sp, #104]	; 0x68
 8002f04:	4654      	mov	r4, sl
 8002f06:	2205      	movs	r2, #5
 8002f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f0c:	4851      	ldr	r0, [pc, #324]	; (8003054 <_svfiprintf_r+0x1ec>)
 8002f0e:	f000 fa41 	bl	8003394 <memchr>
 8002f12:	9a04      	ldr	r2, [sp, #16]
 8002f14:	b9d8      	cbnz	r0, 8002f4e <_svfiprintf_r+0xe6>
 8002f16:	06d0      	lsls	r0, r2, #27
 8002f18:	bf44      	itt	mi
 8002f1a:	2320      	movmi	r3, #32
 8002f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f20:	0711      	lsls	r1, r2, #28
 8002f22:	bf44      	itt	mi
 8002f24:	232b      	movmi	r3, #43	; 0x2b
 8002f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f30:	d015      	beq.n	8002f5e <_svfiprintf_r+0xf6>
 8002f32:	4654      	mov	r4, sl
 8002f34:	2000      	movs	r0, #0
 8002f36:	f04f 0c0a 	mov.w	ip, #10
 8002f3a:	9a07      	ldr	r2, [sp, #28]
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f42:	3b30      	subs	r3, #48	; 0x30
 8002f44:	2b09      	cmp	r3, #9
 8002f46:	d94e      	bls.n	8002fe6 <_svfiprintf_r+0x17e>
 8002f48:	b1b0      	cbz	r0, 8002f78 <_svfiprintf_r+0x110>
 8002f4a:	9207      	str	r2, [sp, #28]
 8002f4c:	e014      	b.n	8002f78 <_svfiprintf_r+0x110>
 8002f4e:	eba0 0308 	sub.w	r3, r0, r8
 8002f52:	fa09 f303 	lsl.w	r3, r9, r3
 8002f56:	4313      	orrs	r3, r2
 8002f58:	46a2      	mov	sl, r4
 8002f5a:	9304      	str	r3, [sp, #16]
 8002f5c:	e7d2      	b.n	8002f04 <_svfiprintf_r+0x9c>
 8002f5e:	9b03      	ldr	r3, [sp, #12]
 8002f60:	1d19      	adds	r1, r3, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	9103      	str	r1, [sp, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bfbb      	ittet	lt
 8002f6a:	425b      	neglt	r3, r3
 8002f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8002f70:	9307      	strge	r3, [sp, #28]
 8002f72:	9307      	strlt	r3, [sp, #28]
 8002f74:	bfb8      	it	lt
 8002f76:	9204      	strlt	r2, [sp, #16]
 8002f78:	7823      	ldrb	r3, [r4, #0]
 8002f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f7c:	d10c      	bne.n	8002f98 <_svfiprintf_r+0x130>
 8002f7e:	7863      	ldrb	r3, [r4, #1]
 8002f80:	2b2a      	cmp	r3, #42	; 0x2a
 8002f82:	d135      	bne.n	8002ff0 <_svfiprintf_r+0x188>
 8002f84:	9b03      	ldr	r3, [sp, #12]
 8002f86:	3402      	adds	r4, #2
 8002f88:	1d1a      	adds	r2, r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	9203      	str	r2, [sp, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfb8      	it	lt
 8002f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f96:	9305      	str	r3, [sp, #20]
 8002f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003064 <_svfiprintf_r+0x1fc>
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4650      	mov	r0, sl
 8002fa0:	7821      	ldrb	r1, [r4, #0]
 8002fa2:	f000 f9f7 	bl	8003394 <memchr>
 8002fa6:	b140      	cbz	r0, 8002fba <_svfiprintf_r+0x152>
 8002fa8:	2340      	movs	r3, #64	; 0x40
 8002faa:	eba0 000a 	sub.w	r0, r0, sl
 8002fae:	fa03 f000 	lsl.w	r0, r3, r0
 8002fb2:	9b04      	ldr	r3, [sp, #16]
 8002fb4:	3401      	adds	r4, #1
 8002fb6:	4303      	orrs	r3, r0
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fbe:	2206      	movs	r2, #6
 8002fc0:	4825      	ldr	r0, [pc, #148]	; (8003058 <_svfiprintf_r+0x1f0>)
 8002fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fc6:	f000 f9e5 	bl	8003394 <memchr>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d038      	beq.n	8003040 <_svfiprintf_r+0x1d8>
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <_svfiprintf_r+0x1f4>)
 8002fd0:	bb1b      	cbnz	r3, 800301a <_svfiprintf_r+0x1b2>
 8002fd2:	9b03      	ldr	r3, [sp, #12]
 8002fd4:	3307      	adds	r3, #7
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	3308      	adds	r3, #8
 8002fdc:	9303      	str	r3, [sp, #12]
 8002fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe0:	4433      	add	r3, r6
 8002fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe4:	e767      	b.n	8002eb6 <_svfiprintf_r+0x4e>
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fee:	e7a5      	b.n	8002f3c <_svfiprintf_r+0xd4>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f04f 0c0a 	mov.w	ip, #10
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	3401      	adds	r4, #1
 8002ffa:	9305      	str	r3, [sp, #20]
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003002:	3a30      	subs	r2, #48	; 0x30
 8003004:	2a09      	cmp	r2, #9
 8003006:	d903      	bls.n	8003010 <_svfiprintf_r+0x1a8>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0c5      	beq.n	8002f98 <_svfiprintf_r+0x130>
 800300c:	9105      	str	r1, [sp, #20]
 800300e:	e7c3      	b.n	8002f98 <_svfiprintf_r+0x130>
 8003010:	4604      	mov	r4, r0
 8003012:	2301      	movs	r3, #1
 8003014:	fb0c 2101 	mla	r1, ip, r1, r2
 8003018:	e7f0      	b.n	8002ffc <_svfiprintf_r+0x194>
 800301a:	ab03      	add	r3, sp, #12
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	462a      	mov	r2, r5
 8003020:	4638      	mov	r0, r7
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <_svfiprintf_r+0x1f8>)
 8003024:	a904      	add	r1, sp, #16
 8003026:	f3af 8000 	nop.w
 800302a:	1c42      	adds	r2, r0, #1
 800302c:	4606      	mov	r6, r0
 800302e:	d1d6      	bne.n	8002fde <_svfiprintf_r+0x176>
 8003030:	89ab      	ldrh	r3, [r5, #12]
 8003032:	065b      	lsls	r3, r3, #25
 8003034:	f53f af2c 	bmi.w	8002e90 <_svfiprintf_r+0x28>
 8003038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800303a:	b01d      	add	sp, #116	; 0x74
 800303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003040:	ab03      	add	r3, sp, #12
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	462a      	mov	r2, r5
 8003046:	4638      	mov	r0, r7
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_svfiprintf_r+0x1f8>)
 800304a:	a904      	add	r1, sp, #16
 800304c:	f000 f87c 	bl	8003148 <_printf_i>
 8003050:	e7eb      	b.n	800302a <_svfiprintf_r+0x1c2>
 8003052:	bf00      	nop
 8003054:	0800362c 	.word	0x0800362c
 8003058:	08003636 	.word	0x08003636
 800305c:	00000000 	.word	0x00000000
 8003060:	08002db1 	.word	0x08002db1
 8003064:	08003632 	.word	0x08003632

08003068 <_printf_common>:
 8003068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800306c:	4616      	mov	r6, r2
 800306e:	4699      	mov	r9, r3
 8003070:	688a      	ldr	r2, [r1, #8]
 8003072:	690b      	ldr	r3, [r1, #16]
 8003074:	4607      	mov	r7, r0
 8003076:	4293      	cmp	r3, r2
 8003078:	bfb8      	it	lt
 800307a:	4613      	movlt	r3, r2
 800307c:	6033      	str	r3, [r6, #0]
 800307e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003082:	460c      	mov	r4, r1
 8003084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003088:	b10a      	cbz	r2, 800308e <_printf_common+0x26>
 800308a:	3301      	adds	r3, #1
 800308c:	6033      	str	r3, [r6, #0]
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	0699      	lsls	r1, r3, #26
 8003092:	bf42      	ittt	mi
 8003094:	6833      	ldrmi	r3, [r6, #0]
 8003096:	3302      	addmi	r3, #2
 8003098:	6033      	strmi	r3, [r6, #0]
 800309a:	6825      	ldr	r5, [r4, #0]
 800309c:	f015 0506 	ands.w	r5, r5, #6
 80030a0:	d106      	bne.n	80030b0 <_printf_common+0x48>
 80030a2:	f104 0a19 	add.w	sl, r4, #25
 80030a6:	68e3      	ldr	r3, [r4, #12]
 80030a8:	6832      	ldr	r2, [r6, #0]
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	42ab      	cmp	r3, r5
 80030ae:	dc28      	bgt.n	8003102 <_printf_common+0x9a>
 80030b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030b4:	1e13      	subs	r3, r2, #0
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	bf18      	it	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	0692      	lsls	r2, r2, #26
 80030be:	d42d      	bmi.n	800311c <_printf_common+0xb4>
 80030c0:	4649      	mov	r1, r9
 80030c2:	4638      	mov	r0, r7
 80030c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c8:	47c0      	blx	r8
 80030ca:	3001      	adds	r0, #1
 80030cc:	d020      	beq.n	8003110 <_printf_common+0xa8>
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	68e5      	ldr	r5, [r4, #12]
 80030d2:	f003 0306 	and.w	r3, r3, #6
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf18      	it	ne
 80030da:	2500      	movne	r5, #0
 80030dc:	6832      	ldr	r2, [r6, #0]
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	68a3      	ldr	r3, [r4, #8]
 80030e4:	bf08      	it	eq
 80030e6:	1aad      	subeq	r5, r5, r2
 80030e8:	6922      	ldr	r2, [r4, #16]
 80030ea:	bf08      	it	eq
 80030ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bfc4      	itt	gt
 80030f4:	1a9b      	subgt	r3, r3, r2
 80030f6:	18ed      	addgt	r5, r5, r3
 80030f8:	341a      	adds	r4, #26
 80030fa:	42b5      	cmp	r5, r6
 80030fc:	d11a      	bne.n	8003134 <_printf_common+0xcc>
 80030fe:	2000      	movs	r0, #0
 8003100:	e008      	b.n	8003114 <_printf_common+0xac>
 8003102:	2301      	movs	r3, #1
 8003104:	4652      	mov	r2, sl
 8003106:	4649      	mov	r1, r9
 8003108:	4638      	mov	r0, r7
 800310a:	47c0      	blx	r8
 800310c:	3001      	adds	r0, #1
 800310e:	d103      	bne.n	8003118 <_printf_common+0xb0>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	3501      	adds	r5, #1
 800311a:	e7c4      	b.n	80030a6 <_printf_common+0x3e>
 800311c:	2030      	movs	r0, #48	; 0x30
 800311e:	18e1      	adds	r1, r4, r3
 8003120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800312a:	4422      	add	r2, r4
 800312c:	3302      	adds	r3, #2
 800312e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003132:	e7c5      	b.n	80030c0 <_printf_common+0x58>
 8003134:	2301      	movs	r3, #1
 8003136:	4622      	mov	r2, r4
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d0e6      	beq.n	8003110 <_printf_common+0xa8>
 8003142:	3601      	adds	r6, #1
 8003144:	e7d9      	b.n	80030fa <_printf_common+0x92>
	...

08003148 <_printf_i>:
 8003148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	460c      	mov	r4, r1
 800314e:	7e27      	ldrb	r7, [r4, #24]
 8003150:	4691      	mov	r9, r2
 8003152:	2f78      	cmp	r7, #120	; 0x78
 8003154:	4680      	mov	r8, r0
 8003156:	469a      	mov	sl, r3
 8003158:	990c      	ldr	r1, [sp, #48]	; 0x30
 800315a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800315e:	d807      	bhi.n	8003170 <_printf_i+0x28>
 8003160:	2f62      	cmp	r7, #98	; 0x62
 8003162:	d80a      	bhi.n	800317a <_printf_i+0x32>
 8003164:	2f00      	cmp	r7, #0
 8003166:	f000 80d9 	beq.w	800331c <_printf_i+0x1d4>
 800316a:	2f58      	cmp	r7, #88	; 0x58
 800316c:	f000 80a4 	beq.w	80032b8 <_printf_i+0x170>
 8003170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003178:	e03a      	b.n	80031f0 <_printf_i+0xa8>
 800317a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800317e:	2b15      	cmp	r3, #21
 8003180:	d8f6      	bhi.n	8003170 <_printf_i+0x28>
 8003182:	a001      	add	r0, pc, #4	; (adr r0, 8003188 <_printf_i+0x40>)
 8003184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031f5 	.word	0x080031f5
 8003190:	08003171 	.word	0x08003171
 8003194:	08003171 	.word	0x08003171
 8003198:	08003171 	.word	0x08003171
 800319c:	08003171 	.word	0x08003171
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	08003171 	.word	0x08003171
 80031a8:	08003171 	.word	0x08003171
 80031ac:	08003171 	.word	0x08003171
 80031b0:	08003171 	.word	0x08003171
 80031b4:	08003303 	.word	0x08003303
 80031b8:	08003225 	.word	0x08003225
 80031bc:	080032e5 	.word	0x080032e5
 80031c0:	08003171 	.word	0x08003171
 80031c4:	08003171 	.word	0x08003171
 80031c8:	08003325 	.word	0x08003325
 80031cc:	08003171 	.word	0x08003171
 80031d0:	08003225 	.word	0x08003225
 80031d4:	08003171 	.word	0x08003171
 80031d8:	08003171 	.word	0x08003171
 80031dc:	080032ed 	.word	0x080032ed
 80031e0:	680b      	ldr	r3, [r1, #0]
 80031e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	600a      	str	r2, [r1, #0]
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0a4      	b.n	800333e <_printf_i+0x1f6>
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	6808      	ldr	r0, [r1, #0]
 80031f8:	062e      	lsls	r6, r5, #24
 80031fa:	f100 0304 	add.w	r3, r0, #4
 80031fe:	d50a      	bpl.n	8003216 <_printf_i+0xce>
 8003200:	6805      	ldr	r5, [r0, #0]
 8003202:	600b      	str	r3, [r1, #0]
 8003204:	2d00      	cmp	r5, #0
 8003206:	da03      	bge.n	8003210 <_printf_i+0xc8>
 8003208:	232d      	movs	r3, #45	; 0x2d
 800320a:	426d      	negs	r5, r5
 800320c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003210:	230a      	movs	r3, #10
 8003212:	485e      	ldr	r0, [pc, #376]	; (800338c <_printf_i+0x244>)
 8003214:	e019      	b.n	800324a <_printf_i+0x102>
 8003216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800321a:	6805      	ldr	r5, [r0, #0]
 800321c:	600b      	str	r3, [r1, #0]
 800321e:	bf18      	it	ne
 8003220:	b22d      	sxthne	r5, r5
 8003222:	e7ef      	b.n	8003204 <_printf_i+0xbc>
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	6825      	ldr	r5, [r4, #0]
 8003228:	1d18      	adds	r0, r3, #4
 800322a:	6008      	str	r0, [r1, #0]
 800322c:	0628      	lsls	r0, r5, #24
 800322e:	d501      	bpl.n	8003234 <_printf_i+0xec>
 8003230:	681d      	ldr	r5, [r3, #0]
 8003232:	e002      	b.n	800323a <_printf_i+0xf2>
 8003234:	0669      	lsls	r1, r5, #25
 8003236:	d5fb      	bpl.n	8003230 <_printf_i+0xe8>
 8003238:	881d      	ldrh	r5, [r3, #0]
 800323a:	2f6f      	cmp	r7, #111	; 0x6f
 800323c:	bf0c      	ite	eq
 800323e:	2308      	moveq	r3, #8
 8003240:	230a      	movne	r3, #10
 8003242:	4852      	ldr	r0, [pc, #328]	; (800338c <_printf_i+0x244>)
 8003244:	2100      	movs	r1, #0
 8003246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800324a:	6866      	ldr	r6, [r4, #4]
 800324c:	2e00      	cmp	r6, #0
 800324e:	bfa8      	it	ge
 8003250:	6821      	ldrge	r1, [r4, #0]
 8003252:	60a6      	str	r6, [r4, #8]
 8003254:	bfa4      	itt	ge
 8003256:	f021 0104 	bicge.w	r1, r1, #4
 800325a:	6021      	strge	r1, [r4, #0]
 800325c:	b90d      	cbnz	r5, 8003262 <_printf_i+0x11a>
 800325e:	2e00      	cmp	r6, #0
 8003260:	d04d      	beq.n	80032fe <_printf_i+0x1b6>
 8003262:	4616      	mov	r6, r2
 8003264:	fbb5 f1f3 	udiv	r1, r5, r3
 8003268:	fb03 5711 	mls	r7, r3, r1, r5
 800326c:	5dc7      	ldrb	r7, [r0, r7]
 800326e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003272:	462f      	mov	r7, r5
 8003274:	42bb      	cmp	r3, r7
 8003276:	460d      	mov	r5, r1
 8003278:	d9f4      	bls.n	8003264 <_printf_i+0x11c>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d10b      	bne.n	8003296 <_printf_i+0x14e>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	07df      	lsls	r7, r3, #31
 8003282:	d508      	bpl.n	8003296 <_printf_i+0x14e>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	6861      	ldr	r1, [r4, #4]
 8003288:	4299      	cmp	r1, r3
 800328a:	bfde      	ittt	le
 800328c:	2330      	movle	r3, #48	; 0x30
 800328e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003292:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003296:	1b92      	subs	r2, r2, r6
 8003298:	6122      	str	r2, [r4, #16]
 800329a:	464b      	mov	r3, r9
 800329c:	4621      	mov	r1, r4
 800329e:	4640      	mov	r0, r8
 80032a0:	f8cd a000 	str.w	sl, [sp]
 80032a4:	aa03      	add	r2, sp, #12
 80032a6:	f7ff fedf 	bl	8003068 <_printf_common>
 80032aa:	3001      	adds	r0, #1
 80032ac:	d14c      	bne.n	8003348 <_printf_i+0x200>
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	b004      	add	sp, #16
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	4834      	ldr	r0, [pc, #208]	; (800338c <_printf_i+0x244>)
 80032ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032be:	680e      	ldr	r6, [r1, #0]
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80032c6:	061f      	lsls	r7, r3, #24
 80032c8:	600e      	str	r6, [r1, #0]
 80032ca:	d514      	bpl.n	80032f6 <_printf_i+0x1ae>
 80032cc:	07d9      	lsls	r1, r3, #31
 80032ce:	bf44      	itt	mi
 80032d0:	f043 0320 	orrmi.w	r3, r3, #32
 80032d4:	6023      	strmi	r3, [r4, #0]
 80032d6:	b91d      	cbnz	r5, 80032e0 <_printf_i+0x198>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f023 0320 	bic.w	r3, r3, #32
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	2310      	movs	r3, #16
 80032e2:	e7af      	b.n	8003244 <_printf_i+0xfc>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	2378      	movs	r3, #120	; 0x78
 80032ee:	4828      	ldr	r0, [pc, #160]	; (8003390 <_printf_i+0x248>)
 80032f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f4:	e7e3      	b.n	80032be <_printf_i+0x176>
 80032f6:	065e      	lsls	r6, r3, #25
 80032f8:	bf48      	it	mi
 80032fa:	b2ad      	uxthmi	r5, r5
 80032fc:	e7e6      	b.n	80032cc <_printf_i+0x184>
 80032fe:	4616      	mov	r6, r2
 8003300:	e7bb      	b.n	800327a <_printf_i+0x132>
 8003302:	680b      	ldr	r3, [r1, #0]
 8003304:	6826      	ldr	r6, [r4, #0]
 8003306:	1d1d      	adds	r5, r3, #4
 8003308:	6960      	ldr	r0, [r4, #20]
 800330a:	600d      	str	r5, [r1, #0]
 800330c:	0635      	lsls	r5, r6, #24
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	d501      	bpl.n	8003316 <_printf_i+0x1ce>
 8003312:	6018      	str	r0, [r3, #0]
 8003314:	e002      	b.n	800331c <_printf_i+0x1d4>
 8003316:	0671      	lsls	r1, r6, #25
 8003318:	d5fb      	bpl.n	8003312 <_printf_i+0x1ca>
 800331a:	8018      	strh	r0, [r3, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	4616      	mov	r6, r2
 8003320:	6123      	str	r3, [r4, #16]
 8003322:	e7ba      	b.n	800329a <_printf_i+0x152>
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	600a      	str	r2, [r1, #0]
 800332a:	681e      	ldr	r6, [r3, #0]
 800332c:	2100      	movs	r1, #0
 800332e:	4630      	mov	r0, r6
 8003330:	6862      	ldr	r2, [r4, #4]
 8003332:	f000 f82f 	bl	8003394 <memchr>
 8003336:	b108      	cbz	r0, 800333c <_printf_i+0x1f4>
 8003338:	1b80      	subs	r0, r0, r6
 800333a:	6060      	str	r0, [r4, #4]
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	6123      	str	r3, [r4, #16]
 8003340:	2300      	movs	r3, #0
 8003342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003346:	e7a8      	b.n	800329a <_printf_i+0x152>
 8003348:	4632      	mov	r2, r6
 800334a:	4649      	mov	r1, r9
 800334c:	4640      	mov	r0, r8
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	47d0      	blx	sl
 8003352:	3001      	adds	r0, #1
 8003354:	d0ab      	beq.n	80032ae <_printf_i+0x166>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	079b      	lsls	r3, r3, #30
 800335a:	d413      	bmi.n	8003384 <_printf_i+0x23c>
 800335c:	68e0      	ldr	r0, [r4, #12]
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	4298      	cmp	r0, r3
 8003362:	bfb8      	it	lt
 8003364:	4618      	movlt	r0, r3
 8003366:	e7a4      	b.n	80032b2 <_printf_i+0x16a>
 8003368:	2301      	movs	r3, #1
 800336a:	4632      	mov	r2, r6
 800336c:	4649      	mov	r1, r9
 800336e:	4640      	mov	r0, r8
 8003370:	47d0      	blx	sl
 8003372:	3001      	adds	r0, #1
 8003374:	d09b      	beq.n	80032ae <_printf_i+0x166>
 8003376:	3501      	adds	r5, #1
 8003378:	68e3      	ldr	r3, [r4, #12]
 800337a:	9903      	ldr	r1, [sp, #12]
 800337c:	1a5b      	subs	r3, r3, r1
 800337e:	42ab      	cmp	r3, r5
 8003380:	dcf2      	bgt.n	8003368 <_printf_i+0x220>
 8003382:	e7eb      	b.n	800335c <_printf_i+0x214>
 8003384:	2500      	movs	r5, #0
 8003386:	f104 0619 	add.w	r6, r4, #25
 800338a:	e7f5      	b.n	8003378 <_printf_i+0x230>
 800338c:	0800363d 	.word	0x0800363d
 8003390:	0800364e 	.word	0x0800364e

08003394 <memchr>:
 8003394:	4603      	mov	r3, r0
 8003396:	b510      	push	{r4, lr}
 8003398:	b2c9      	uxtb	r1, r1
 800339a:	4402      	add	r2, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	d101      	bne.n	80033a6 <memchr+0x12>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e003      	b.n	80033ae <memchr+0x1a>
 80033a6:	7804      	ldrb	r4, [r0, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	428c      	cmp	r4, r1
 80033ac:	d1f6      	bne.n	800339c <memchr+0x8>
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <memcpy>:
 80033b0:	440a      	add	r2, r1
 80033b2:	4291      	cmp	r1, r2
 80033b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80033b8:	d100      	bne.n	80033bc <memcpy+0xc>
 80033ba:	4770      	bx	lr
 80033bc:	b510      	push	{r4, lr}
 80033be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033c2:	4291      	cmp	r1, r2
 80033c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033c8:	d1f9      	bne.n	80033be <memcpy+0xe>
 80033ca:	bd10      	pop	{r4, pc}

080033cc <memmove>:
 80033cc:	4288      	cmp	r0, r1
 80033ce:	b510      	push	{r4, lr}
 80033d0:	eb01 0402 	add.w	r4, r1, r2
 80033d4:	d902      	bls.n	80033dc <memmove+0x10>
 80033d6:	4284      	cmp	r4, r0
 80033d8:	4623      	mov	r3, r4
 80033da:	d807      	bhi.n	80033ec <memmove+0x20>
 80033dc:	1e43      	subs	r3, r0, #1
 80033de:	42a1      	cmp	r1, r4
 80033e0:	d008      	beq.n	80033f4 <memmove+0x28>
 80033e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ea:	e7f8      	b.n	80033de <memmove+0x12>
 80033ec:	4601      	mov	r1, r0
 80033ee:	4402      	add	r2, r0
 80033f0:	428a      	cmp	r2, r1
 80033f2:	d100      	bne.n	80033f6 <memmove+0x2a>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033fe:	e7f7      	b.n	80033f0 <memmove+0x24>

08003400 <_free_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4605      	mov	r5, r0
 8003404:	2900      	cmp	r1, #0
 8003406:	d043      	beq.n	8003490 <_free_r+0x90>
 8003408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800340c:	1f0c      	subs	r4, r1, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	bfb8      	it	lt
 8003412:	18e4      	addlt	r4, r4, r3
 8003414:	f000 f8d0 	bl	80035b8 <__malloc_lock>
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <_free_r+0x94>)
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	4610      	mov	r0, r2
 800341e:	b933      	cbnz	r3, 800342e <_free_r+0x2e>
 8003420:	6063      	str	r3, [r4, #4]
 8003422:	6014      	str	r4, [r2, #0]
 8003424:	4628      	mov	r0, r5
 8003426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800342a:	f000 b8cb 	b.w	80035c4 <__malloc_unlock>
 800342e:	42a3      	cmp	r3, r4
 8003430:	d90a      	bls.n	8003448 <_free_r+0x48>
 8003432:	6821      	ldr	r1, [r4, #0]
 8003434:	1862      	adds	r2, r4, r1
 8003436:	4293      	cmp	r3, r2
 8003438:	bf01      	itttt	eq
 800343a:	681a      	ldreq	r2, [r3, #0]
 800343c:	685b      	ldreq	r3, [r3, #4]
 800343e:	1852      	addeq	r2, r2, r1
 8003440:	6022      	streq	r2, [r4, #0]
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6004      	str	r4, [r0, #0]
 8003446:	e7ed      	b.n	8003424 <_free_r+0x24>
 8003448:	461a      	mov	r2, r3
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	b10b      	cbz	r3, 8003452 <_free_r+0x52>
 800344e:	42a3      	cmp	r3, r4
 8003450:	d9fa      	bls.n	8003448 <_free_r+0x48>
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	1850      	adds	r0, r2, r1
 8003456:	42a0      	cmp	r0, r4
 8003458:	d10b      	bne.n	8003472 <_free_r+0x72>
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	4401      	add	r1, r0
 800345e:	1850      	adds	r0, r2, r1
 8003460:	4283      	cmp	r3, r0
 8003462:	6011      	str	r1, [r2, #0]
 8003464:	d1de      	bne.n	8003424 <_free_r+0x24>
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4401      	add	r1, r0
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	6053      	str	r3, [r2, #4]
 8003470:	e7d8      	b.n	8003424 <_free_r+0x24>
 8003472:	d902      	bls.n	800347a <_free_r+0x7a>
 8003474:	230c      	movs	r3, #12
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	e7d4      	b.n	8003424 <_free_r+0x24>
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	1821      	adds	r1, r4, r0
 800347e:	428b      	cmp	r3, r1
 8003480:	bf01      	itttt	eq
 8003482:	6819      	ldreq	r1, [r3, #0]
 8003484:	685b      	ldreq	r3, [r3, #4]
 8003486:	1809      	addeq	r1, r1, r0
 8003488:	6021      	streq	r1, [r4, #0]
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	6054      	str	r4, [r2, #4]
 800348e:	e7c9      	b.n	8003424 <_free_r+0x24>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	bf00      	nop
 8003494:	20000090 	.word	0x20000090

08003498 <_malloc_r>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	1ccd      	adds	r5, r1, #3
 800349c:	f025 0503 	bic.w	r5, r5, #3
 80034a0:	3508      	adds	r5, #8
 80034a2:	2d0c      	cmp	r5, #12
 80034a4:	bf38      	it	cc
 80034a6:	250c      	movcc	r5, #12
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	4606      	mov	r6, r0
 80034ac:	db01      	blt.n	80034b2 <_malloc_r+0x1a>
 80034ae:	42a9      	cmp	r1, r5
 80034b0:	d903      	bls.n	80034ba <_malloc_r+0x22>
 80034b2:	230c      	movs	r3, #12
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	2000      	movs	r0, #0
 80034b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ba:	f000 f87d 	bl	80035b8 <__malloc_lock>
 80034be:	4921      	ldr	r1, [pc, #132]	; (8003544 <_malloc_r+0xac>)
 80034c0:	680a      	ldr	r2, [r1, #0]
 80034c2:	4614      	mov	r4, r2
 80034c4:	b99c      	cbnz	r4, 80034ee <_malloc_r+0x56>
 80034c6:	4f20      	ldr	r7, [pc, #128]	; (8003548 <_malloc_r+0xb0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b923      	cbnz	r3, 80034d6 <_malloc_r+0x3e>
 80034cc:	4621      	mov	r1, r4
 80034ce:	4630      	mov	r0, r6
 80034d0:	f000 f862 	bl	8003598 <_sbrk_r>
 80034d4:	6038      	str	r0, [r7, #0]
 80034d6:	4629      	mov	r1, r5
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f85d 	bl	8003598 <_sbrk_r>
 80034de:	1c43      	adds	r3, r0, #1
 80034e0:	d123      	bne.n	800352a <_malloc_r+0x92>
 80034e2:	230c      	movs	r3, #12
 80034e4:	4630      	mov	r0, r6
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	f000 f86c 	bl	80035c4 <__malloc_unlock>
 80034ec:	e7e3      	b.n	80034b6 <_malloc_r+0x1e>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	1b5b      	subs	r3, r3, r5
 80034f2:	d417      	bmi.n	8003524 <_malloc_r+0x8c>
 80034f4:	2b0b      	cmp	r3, #11
 80034f6:	d903      	bls.n	8003500 <_malloc_r+0x68>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	441c      	add	r4, r3
 80034fc:	6025      	str	r5, [r4, #0]
 80034fe:	e004      	b.n	800350a <_malloc_r+0x72>
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	42a2      	cmp	r2, r4
 8003504:	bf0c      	ite	eq
 8003506:	600b      	streq	r3, [r1, #0]
 8003508:	6053      	strne	r3, [r2, #4]
 800350a:	4630      	mov	r0, r6
 800350c:	f000 f85a 	bl	80035c4 <__malloc_unlock>
 8003510:	f104 000b 	add.w	r0, r4, #11
 8003514:	1d23      	adds	r3, r4, #4
 8003516:	f020 0007 	bic.w	r0, r0, #7
 800351a:	1ac2      	subs	r2, r0, r3
 800351c:	d0cc      	beq.n	80034b8 <_malloc_r+0x20>
 800351e:	1a1b      	subs	r3, r3, r0
 8003520:	50a3      	str	r3, [r4, r2]
 8003522:	e7c9      	b.n	80034b8 <_malloc_r+0x20>
 8003524:	4622      	mov	r2, r4
 8003526:	6864      	ldr	r4, [r4, #4]
 8003528:	e7cc      	b.n	80034c4 <_malloc_r+0x2c>
 800352a:	1cc4      	adds	r4, r0, #3
 800352c:	f024 0403 	bic.w	r4, r4, #3
 8003530:	42a0      	cmp	r0, r4
 8003532:	d0e3      	beq.n	80034fc <_malloc_r+0x64>
 8003534:	1a21      	subs	r1, r4, r0
 8003536:	4630      	mov	r0, r6
 8003538:	f000 f82e 	bl	8003598 <_sbrk_r>
 800353c:	3001      	adds	r0, #1
 800353e:	d1dd      	bne.n	80034fc <_malloc_r+0x64>
 8003540:	e7cf      	b.n	80034e2 <_malloc_r+0x4a>
 8003542:	bf00      	nop
 8003544:	20000090 	.word	0x20000090
 8003548:	20000094 	.word	0x20000094

0800354c <_realloc_r>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	4607      	mov	r7, r0
 8003550:	4614      	mov	r4, r2
 8003552:	460e      	mov	r6, r1
 8003554:	b921      	cbnz	r1, 8003560 <_realloc_r+0x14>
 8003556:	4611      	mov	r1, r2
 8003558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800355c:	f7ff bf9c 	b.w	8003498 <_malloc_r>
 8003560:	b922      	cbnz	r2, 800356c <_realloc_r+0x20>
 8003562:	f7ff ff4d 	bl	8003400 <_free_r>
 8003566:	4625      	mov	r5, r4
 8003568:	4628      	mov	r0, r5
 800356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356c:	f000 f830 	bl	80035d0 <_malloc_usable_size_r>
 8003570:	42a0      	cmp	r0, r4
 8003572:	d20f      	bcs.n	8003594 <_realloc_r+0x48>
 8003574:	4621      	mov	r1, r4
 8003576:	4638      	mov	r0, r7
 8003578:	f7ff ff8e 	bl	8003498 <_malloc_r>
 800357c:	4605      	mov	r5, r0
 800357e:	2800      	cmp	r0, #0
 8003580:	d0f2      	beq.n	8003568 <_realloc_r+0x1c>
 8003582:	4631      	mov	r1, r6
 8003584:	4622      	mov	r2, r4
 8003586:	f7ff ff13 	bl	80033b0 <memcpy>
 800358a:	4631      	mov	r1, r6
 800358c:	4638      	mov	r0, r7
 800358e:	f7ff ff37 	bl	8003400 <_free_r>
 8003592:	e7e9      	b.n	8003568 <_realloc_r+0x1c>
 8003594:	4635      	mov	r5, r6
 8003596:	e7e7      	b.n	8003568 <_realloc_r+0x1c>

08003598 <_sbrk_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	2300      	movs	r3, #0
 800359c:	4d05      	ldr	r5, [pc, #20]	; (80035b4 <_sbrk_r+0x1c>)
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fe fa6a 	bl	8001a7c <_sbrk>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_sbrk_r+0x1a>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_sbrk_r+0x1a>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000100 	.word	0x20000100

080035b8 <__malloc_lock>:
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <__malloc_lock+0x8>)
 80035ba:	f000 b811 	b.w	80035e0 <__retarget_lock_acquire_recursive>
 80035be:	bf00      	nop
 80035c0:	20000108 	.word	0x20000108

080035c4 <__malloc_unlock>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__malloc_unlock+0x8>)
 80035c6:	f000 b80c 	b.w	80035e2 <__retarget_lock_release_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000108 	.word	0x20000108

080035d0 <_malloc_usable_size_r>:
 80035d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d4:	1f18      	subs	r0, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfbc      	itt	lt
 80035da:	580b      	ldrlt	r3, [r1, r0]
 80035dc:	18c0      	addlt	r0, r0, r3
 80035de:	4770      	bx	lr

080035e0 <__retarget_lock_acquire_recursive>:
 80035e0:	4770      	bx	lr

080035e2 <__retarget_lock_release_recursive>:
 80035e2:	4770      	bx	lr

080035e4 <_init>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr

080035f0 <_fini>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr
